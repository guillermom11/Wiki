{
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\jest.config": [],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\index": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\index::port",
      "language": "typescript",
      "label": "port",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\index",
      "totalTokens": 5,
      "inDegree": 0,
      "outDegree": 1,
      "code": "port = 8001",
      "importStatements": [],
      "codeNoBody": "port ={\n          //...\n      }",
      "summary": "The assignment \"port\" sets the value 8001, which is used as the port number for the server to listen on, as part of the \"@hono/node-server\" import statement."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\index::fs",
      "language": "typescript",
      "label": "fs",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\index",
      "totalTokens": 6,
      "inDegree": 0,
      "outDegree": 1,
      "code": "fs = require(\"fs\")",
      "importStatements": [],
      "codeNoBody": "fs ={\n        //...\n    }",
      "summary": "Import `fs` from the Node.js core module \"fs\" using the `require` function."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\index::app",
      "language": "typescript",
      "label": "app",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\index",
      "totalTokens": 371,
      "inDegree": 0,
      "outDegree": 1,
      "code": "app = new Hono()\napp.use(\"*\", prettyJSON())\napp.use(\"/v1/*\", cors())\napp.get(\"/\", async (c) => {\r\n  console.time(\"codebase\");\r\n  // const codebasePath = path.join(__dirname, '../../../codebase-index')\r\n  const codebasePath =\r\n    \"C:\\\\Users\\\\gmasc\\\\OneDrive\\\\Documentos\\\\CodeGPT\\\\Graphs\\\\codebase-index-ts\";\r\n  const codebase = new Codebase(codebasePath); //\r\n  console.log(`Parsing ${codebasePath}`);\r\n  const fileNodesMap = await codebase.parseFolder();\r\n  console.log(`Found ${Object.keys(codebase.nodesMap).length} nodes`);\r\n  console.log(\"Getting Calls\");\r\n  codebase.getCalls(fileNodesMap, false);\r\n  console.timeEnd(\"codebase\");\r\n  const codebaseSimplified = codebase.simplify([\r\n    \"id\",\r\n    \"language\",\r\n    \"label\",\r\n    \"type\",\r\n    \"parent\",\r\n    \"totalTokens\",\r\n    \"inDegree\",\r\n    \"outDegree\",\r\n    \"code\",\r\n    \"parent\",\r\n    \"importStatements\",\r\n    \"codeNoBody\",\r\n  ]); //.filter(c => !['file'].includes(c.type))\r\n  const links = codebase.getLinks();\r\n\r\n  // console.log(codebaseSimplified)\r\n  await Promise.all([\r\n    writeFile(\"nodes.json\", JSON.stringify(codebaseSimplified, null, 2)),\r\n    writeFile(\"links.json\", JSON.stringify(links, null, 2)),\r\n  ]);\r\n  return c.text(JSON.stringify(codebaseSimplified, null, 2));\r\n\r\n  // return c.text(JSON.stringify(codebase.getLinks(), null, 2))\r\n})\napp.route(\"/v1/repo\", createGraph)\napp.route(\"/v1/graphs\", graphs)\napp.route(\"v1/repo-test\", createGraphTest)",
      "importStatements": [],
      "codeNoBody": "app = \napp.use(\"*\", prettyJSON())\napp.use(\"/v1/*\", cors())\napp.get(\"/\", async (c) => {\r\n  console.time(\"codebase\");\r\n  // const codebasePath = path.join(__dirname, '../../../codebase-index')\r\n  const codebasePath =\r\n    \"C:\\\\Users\\\\gmasc\\\\OneDrive\\\\Documentos\\\\CodeGPT\\\\Graphs\\\\codebase-index-ts\";\r\n  const codebase = new Codebase(codebasePath); //\r\n  console.log(`Parsing ${codebasePath}`);\r\n  const fileNodesMap = await codebase.parseFolder();\r\n  console.log(`Found ${Object.keys(codebase.nodesMap).length} nodes`);\r\n  console.log(\"Getting Calls\");\r\n  codebase.getCalls(fileNodesMap, false);\r\n  console.timeEnd(\"codebase\");\r\n  const codebaseSimplified = codebase.simplify([\r\n    \"id\",\r\n    \"language\",\r\n    \"label\",\r\n    \"type\",\r\n    \"parent\",\r\n    \"totalTokens\",\r\n    \"inDegree\",\r\n    \"outDegree\",\r\n    \"code\",\r\n    \"parent\",\r\n    \"importStatements\",\r\n    \"codeNoBody\",\r\n  ]); //.filter(c => !['file'].includes(c.type))\r\n  const links = codebase.getLinks();\r\n  // console.log(codebaseSimplified)\r\n  await Promise.all([\r\n    writeFile(\"nodes.json\", JSON.stringify(codebaseSimplified, null, 2)),\r\n    writeFile(\"links.json\", JSON.stringify(links, null, 2)),\r\n  ]);\r\n  return c.text(JSON.stringify(codebaseSimplified, null, 2));\r\n\r\n  // return c.text(JSON.stringify(codebase.getLinks(), null, 2))\r\n})\napp.route(\"/v1/repo\", createGraph)\napp.route(\"/v1/graphs\", graphs)\napp.route(\"v1/repo-test\", createGraphTest){\n          //...\n      }",
      "summary": "The \"app\" assignment initializes a new Hono server, applies middleware for JSON formatting and CORS, defines a route to handle a GET request at the root path to parse a codebase directory, simplify the codebase structure, extract links, write the simplified data to JSON files, and return the simplified data as a response, and sets up additional routes for creating graphs and handling graph-related operations. The assignment relies on imports from \"@hono/node-server\", \"hono\", \"hono/cors\", \"hono/pretty-json\", \"./routes/create_graph\", \"./routes/create_graph-test\", \"./routes/graphs\", \"./model/codebase\", and \"node:fs/promises\"."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\calls": [],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\codebase": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\codebase::enc",
      "language": "typescript",
      "label": "enc",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\codebase",
      "totalTokens": 14,
      "inDegree": 1,
      "outDegree": 1,
      "code": "enc = encoding_for_model(\"gpt-4-turbo\")",
      "importStatements": [],
      "codeNoBody": "enc ={\n          //...\n      }",
      "summary": "The assignment \"enc\" is set to the result of calling the \"encoding_for_model\" function from the \"tiktoken\" module with the argument \"gpt-4-turbo\"."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::treeSitterCommentTypes",
      "language": "typescript",
      "label": "treeSitterCommentTypes",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 17,
      "inDegree": 0,
      "outDegree": 1,
      "code": "treeSitterCommentTypes = ['comment', 'line_comment', 'block_comment']",
      "importStatements": [],
      "codeNoBody": "treeSitterCommentTypes ={\n                 //...\n             }",
      "summary": "`treeSitterCommentTypes` is an array containing three types of comments: 'comment', 'line_comment', and 'block_comment'. It is used in conjunction with the imports from 'tree-sitter-javascript', 'tree-sitter-python', 'tree-sitter-typescript', 'tree-sitter-java', and 'tree-sitter-c'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::indexSuffixesMap",
      "language": "typescript",
      "label": "indexSuffixesMap",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 54,
      "inDegree": 0,
      "outDegree": 1,
      "code": "indexSuffixesMap: Record<string, string> = {\r\n    'python': '/__init__',\r\n    'javascript': '/index',\r\n    'typescript': '/index',\r\n    'tsx': '/index',\r\n    'java': '' // java has no index\r\n}",
      "importStatements": [],
      "codeNoBody": "indexSuffixesMap: Record<string, string> ={\n                 //...\n             }",
      "summary": "The `indexSuffixesMap` object maps file extensions to their corresponding index suffixes, where JavaScript, TypeScript, and TSX files have an index suffix of '/index', Python files have '/__init__', and Java files have no index suffix. The object is defined in a file that imports tree-sitter parsers for JavaScript, Python, TypeScript, TSX, Java, and C."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::itselfClassMap",
      "language": "typescript",
      "label": "itselfClassMap",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 48,
      "inDegree": 0,
      "outDegree": 1,
      "code": "itselfClassMap: Record<string, string> = {\r\n    'python': 'self',\r\n    'javascript': 'this',\r\n    'typescript': 'this',\r\n    'tsx': 'this',\r\n    'java': 'this'\r\n}",
      "importStatements": [],
      "codeNoBody": "itselfClassMap: Record<string, string> ={\n                 //...\n             }",
      "summary": "This assignment `itselfClassMap` is a TypeScript Record that maps programming languages to their respective keywords for referring to the current instance, including 'python' to 'self', 'javascript' to 'this', 'typescript' to 'this', 'tsx' to 'this', and 'java' to 'this'. It relies on imports from 'tree-sitter-javascript', 'tree-sitter-python', 'tree-sitter-typescript', 'tree-sitter-java', and 'tree-sitter-c'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::newClassMethodsMap",
      "language": "typescript",
      "label": "newClassMethodsMap",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 65,
      "inDegree": 0,
      "outDegree": 1,
      "code": "newClassMethodsMap: Record<string, string> = {\r\n    'python': '__init__',\r\n    'javascript': 'constructor',\r\n    'typescript': 'constructor',\r\n    'tsx': 'constructor',\r\n    'java': '', // java constructor has the same name as the class\r\n    'rust': 'new'\r\n}",
      "importStatements": [],
      "codeNoBody": "newClassMethodsMap: Record<string, string> ={\n                 //...\n             }",
      "summary": "The `newClassMethodsMap` object maps programming languages to their respective class constructor method names, including 'python' to '__init__', 'javascript', 'typescript', and 'tsx' to 'constructor', 'java' to an empty string (as Java constructors have the same name as the class), and 'rust' to 'new'. The assignment relies on imports from 'tree-sitter-javascript', 'tree-sitter-python', 'tree-sitter-typescript' for TypeScript, 'tree-sitter-java', and 'tree-sitter-c'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::languageExtensionMap",
      "language": "typescript",
      "label": "languageExtensionMap",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 86,
      "inDegree": 0,
      "outDegree": 1,
      "code": "languageExtensionMap: Record<string, string> = {\r\n  'py': 'python',\r\n  'c': 'c',\r\n  'h': 'c',\r\n  // 'ipynb': 'python',\r\n  'js': 'typescript',\r\n  'mjs': 'typescript',\r\n  'jsx': 'typescript',\r\n  'ts': 'typescript',\r\n  'tsx': 'tsx',\r\n  'java': 'java',\r\n}",
      "importStatements": [],
      "codeNoBody": "languageExtensionMap: Record<string, string> ={\n                 //...\n             }",
      "summary": "This assignment defines a `languageExtensionMap` object that maps file extensions to their corresponding programming languages, utilizing the tree-sitter parsers for JavaScript, Python, TypeScript, TSX, Java, and C."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::languages",
      "language": "typescript",
      "label": "languages",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 23,
      "inDegree": 0,
      "outDegree": 1,
      "code": "languages = {\r\n    JavaScript,\r\n    Python,\r\n    TypeScript,\r\n    TSX,\r\n    Java,\r\n    C\r\n}",
      "importStatements": [],
      "codeNoBody": "languages ={\n                 //...\n             }",
      "summary": "The `languages` object contains references to various tree-sitter language parsers imported using require statements, including JavaScript, Python, TypeScript, TSX, Java, and C."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::excludedExtensions",
      "language": "typescript",
      "label": "excludedExtensions",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 30,
      "inDegree": 0,
      "outDegree": 1,
      "code": "excludedExtensions = ['min.js', 'min.css', 'min.css.map', 'min.js.map', 'd.ts', '.config.js']",
      "importStatements": [],
      "codeNoBody": "excludedExtensions ={\n                 //...\n             }",
      "summary": "`excludedExtensions` is an array that contains file extensions to be excluded, such as 'min.js', 'min.css', 'min.css.map', 'min.js.map', 'd.ts', and '.config.js'. This assignment is defined in a file that imports tree-sitter libraries for JavaScript, Python, TypeScript, TSX, Java, and C."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::excludedFolders",
      "language": "typescript",
      "label": "excludedFolders",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 42,
      "inDegree": 0,
      "outDegree": 1,
      "code": "excludedFolders = ['.git', '.vscode', 'venv', 'node_modules', 'dist', '__pycache__', 'tests', 'build', '_static', 'jest', '__tests__']",
      "importStatements": [],
      "codeNoBody": "excludedFolders ={\n                 //...\n             }",
      "summary": "`excludedFolders` is an array that contains the names of folders to be excluded from processing, such as '.git', '.vscode', 'venv', 'node_modules', 'dist', '__pycache__', 'tests', 'build', '_static', 'jest', and '__tests__'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::C",
      "language": "typescript",
      "label": "C",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 9,
      "inDegree": 0,
      "outDegree": 1,
      "code": "C = require(\"tree-sitter-c\")",
      "importStatements": [],
      "codeNoBody": "C ={\n          //...\n      }",
      "summary": "Import the \"tree-sitter-c\" module for parsing C code by assigning it to the variable C."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::Java",
      "language": "typescript",
      "label": "Java",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 9,
      "inDegree": 0,
      "outDegree": 1,
      "code": "Java = require(\"tree-sitter-java\")",
      "importStatements": [],
      "codeNoBody": "Java ={\n          //...\n      }",
      "summary": "The assignment \"Java\" imports the tree-sitter-java module, which is used for parsing Java code."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::TSX",
      "language": "typescript",
      "label": "TSX",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 12,
      "inDegree": 0,
      "outDegree": 1,
      "code": "TSX = require(\"tree-sitter-typescript\").tsx",
      "importStatements": [],
      "codeNoBody": "TSX ={\n          //...\n      }",
      "summary": "Import the TSX module from the \"tree-sitter-typescript\" library, making it available for use in the current file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::TypeScript",
      "language": "typescript",
      "label": "TypeScript",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 13,
      "inDegree": 0,
      "outDegree": 1,
      "code": "TypeScript  = require('tree-sitter-typescript').typescript",
      "importStatements": [],
      "codeNoBody": "TypeScript  ={\n          //...\n      }",
      "summary": "Import the TypeScript grammar from the 'tree-sitter-typescript' library using the assignment 'TypeScript'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::Python",
      "language": "typescript",
      "label": "Python",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 9,
      "inDegree": 0,
      "outDegree": 1,
      "code": "Python = require(\"tree-sitter-python\")",
      "importStatements": [],
      "codeNoBody": "Python ={\n          //...\n      }",
      "summary": "Import the Python language grammar from the \"tree-sitter-python\" module using the require statement."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts::JavaScript",
      "language": "typescript",
      "label": "JavaScript",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\consts",
      "totalTokens": 10,
      "inDegree": 0,
      "outDegree": 1,
      "code": "JavaScript = require(\"tree-sitter-javascript\")",
      "importStatements": [],
      "codeNoBody": "JavaScript ={\n          //...\n      }",
      "summary": "Import the JavaScript grammar from the \"tree-sitter-javascript\" package using the assignment `JavaScript = require(\"tree-sitter-javascript\")`."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils::getCalledNode",
      "language": "typescript",
      "label": "getCalledNode",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils",
      "totalTokens": 87,
      "inDegree": 0,
      "outDegree": 1,
      "code": "function getCalledNode(\r\n  callName: string,\r\n  importFrom: string,\r\n  importedFileNodes: Record<\r\n    string,\r\n    { fileNode: Node; importStatement: ImportStatement }\r\n  >\r\n) {\r\n  const importedFile = importedFileNodes[importFrom].fileNode;\r\n  const calledNode = importedFile?.getChild(`${importedFile.id}::${callName}`);\r\n  return calledNode;\r\n}",
      "importStatements": [],
      "codeNoBody": "function getCalledNode(\r\n  callName: string,\r\n  importFrom: string,\r\n  importedFileNodes: Record<\r\n    string,\r\n    { fileNode: Node; importStatement: ImportStatement }\r\n  >\r\n){\n           //...\n       }",
      "summary": "This function `getCalledNode` takes a `callName` string, an `importFrom` string, and a dictionary `importedFileNodes` containing file nodes and import statements. It retrieves the file node from the specified import, then attempts to find and return a specific child node within that file node based on the provided `callName`."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils::cleanAndSplitContent",
      "language": "typescript",
      "label": "cleanAndSplitContent",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils",
      "totalTokens": 128,
      "inDegree": 0,
      "outDegree": 1,
      "code": "const cleanAndSplitContent = (content: string): string[] => {\r\n  // Remove parentheses and their contents, newlines, and unwanted characters\r\n  // Replace ':' and '|' with ','\r\n  content = content\r\n    .replace(/\\(|\\)|\\n|\\s{2,}/gs, \"\")\r\n    .replace(/[:|]/g, \",\")\r\n    .trim();\r\n\r\n  // Split the content by commas, remove surrounding brackets/braces, and trim each part\r\n  return content\r\n    .split(\",\")\r\n    .map((item) => item.replace(/[\\[\\]\\{\\}]/g, \"\").trim());\r\n};",
      "importStatements": [],
      "codeNoBody": "const cleanAndSplitContent = (content: string): string[] => ;{\n           //...\n       }",
      "summary": "This function, \"cleanAndSplitContent\", takes a string \"content\" as input and removes parentheses, their contents, newlines, and unwanted characters, replaces ':' and '|' with ',', and trims the string. It then splits the content by commas, removes surrounding brackets/braces, and trims each part before returning an array of strings."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils::firstConsecutiveDots",
      "language": "typescript",
      "label": "firstConsecutiveDots",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils",
      "totalTokens": 38,
      "inDegree": 1,
      "outDegree": 1,
      "code": "function firstConsecutiveDots(s: string): number {\r\n  const match = s.match(/^\\.{1,}/);\r\n  return match ? match[0].length : 0;\r\n}",
      "importStatements": [],
      "codeNoBody": "function firstConsecutiveDots(s: string): number{\n    //...\n}",
      "summary": "The function \"firstConsecutiveDots\" takes a string \"s\" as input and returns the length of the first consecutive sequence of dots at the beginning of the string."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils::cleanDefCaptures",
      "language": "typescript",
      "label": "cleanDefCaptures",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils",
      "totalTokens": 162,
      "inDegree": 0,
      "outDegree": 1,
      "code": "function cleanDefCaptures(\r\n  captures: Parser.QueryCapture[],\r\n  keyword: string = \"name\"\r\n): Parser.QueryCapture[] {\r\n  captures.sort(\r\n    (a, b) =>\r\n      a.node.startPosition.row - b.node.startPosition.row ||\r\n      a.node.startPosition.column - b.node.startPosition.column\r\n  );\r\n  let keywordSeen = false;\r\n\r\n  const updatedCaptures = [];\r\n  for (let i = 0; i < captures.length; i++) {\r\n    if (captures[i].name === keyword) {\r\n      if (!keywordSeen) {\r\n        updatedCaptures.push(captures[i]);\r\n        keywordSeen = true;\r\n      } else break;\r\n    } else {\r\n      updatedCaptures.push(captures[i]);\r\n    }\r\n  }\r\n  return updatedCaptures;\r\n}",
      "importStatements": [],
      "codeNoBody": "function cleanDefCaptures(\r\n  captures: Parser.QueryCapture[],\r\n  keyword: string = \"name\"\r\n): Parser.QueryCapture[]{\n           //...\n       }",
      "summary": "This function `cleanDefCaptures` takes an array of `captures` and an optional `keyword` string parameter, defaulting to \"name\". It sorts the captures based on their node positions, then filters out duplicates of the first occurrence of the specified `keyword` in the captures array, returning the updated captures array. The function relies on the `Parser.QueryCapture` type from the import statement `import Parser from \"tree-sitter\";`."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils::getRequiredDefinitions",
      "language": "typescript",
      "label": "getRequiredDefinitions",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils",
      "totalTokens": 213,
      "inDegree": 1,
      "outDegree": 1,
      "code": "function getRequiredDefinitions(language: string): {\r\n  parser: Parser;\r\n  queries: treeSitterQueries;\r\n} {\r\n  const parser = new Parser();\r\n  let queries;\r\n  switch (language) {\r\n    case \"javascript\":\r\n      parser.setLanguage(languages.JavaScript);\r\n      queries = languageQueries.Javascript;\r\n      break;\r\n    case \"python\":\r\n      parser.setLanguage(languages.Python);\r\n      queries = languageQueries.Python;\r\n      break;\r\n    case \"typescript\":\r\n      parser.setLanguage(languages.TypeScript);\r\n      queries = languageQueries.Typescript;\r\n      break;\r\n    case \"tsx\":\r\n      parser.setLanguage(languages.TSX);\r\n      queries = languageQueries.Typescript;\r\n      break;\r\n    case \"java\":\r\n      parser.setLanguage(languages.Java);\r\n      queries = languageQueries.Java;\r\n      break;\r\n    case \"c\":\r\n      parser.setLanguage(languages.C);\r\n      queries = languageQueries.C;\r\n      break;\r\n\r\n    default:\r\n      throw new Error(`Language ${language} not supported.`);\r\n  }\r\n  return { parser, queries };\r\n}",
      "importStatements": [],
      "codeNoBody": "function getRequiredDefinitions(language: string): {\r\n  parser: Parser;\r\n  queries: treeSitterQueries;\r\n}{\n           //...\n       }",
      "summary": "This function `getRequiredDefinitions` takes a `language` parameter to determine the language-specific parser and queries needed, returning an object with `parser` and `queries` properties. The function initializes a parser based on the provided `language` using the Tree-sitter library, setting the language and queries accordingly for languages like JavaScript, Python, TypeScript, TSX, Java, or C. If the `language` is not supported, an error is thrown. The function requires imports from \"./consts\" for language constants and from \"../queries\" for language-specific queries."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils::getAllFiles",
      "language": "typescript",
      "label": "getAllFiles",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\model\\utils",
      "totalTokens": 270,
      "inDegree": 1,
      "outDegree": 1,
      "code": "async function getAllFiles(rootFolderPath: string): Promise<string[]> {\r\n  const extensionsPattern = Object.keys(languageExtensionMap)\r\n    .map((ext) => `\\\\.${ext}$`)\r\n    .join(\"|\");\r\n  const regex = new RegExp(extensionsPattern);\r\n  const excludedExtensionPattern = new RegExp(\r\n    excludedExtensions.map((ext) => `\\\\.${ext}$`).join(\"|\")\r\n  );\r\n  const excludedFolderPattern = new RegExp(\r\n    excludedFolders.map((f) => `${f}/`).join(\"|\")\r\n  );\r\n  const files = await glob(`**/*`, {\r\n    cwd: rootFolderPath,\r\n    absolute: true,\r\n  });\r\n  // no sync\r\n  const validFiles = await Promise.all(\r\n    files.map(async (file) => (await fs.lstat(file)).isFile())\r\n  );\r\n  const matchingFiles = files.filter(\r\n    (file, i) =>\r\n      regex.test(file) &&\r\n      validFiles[i] &&\r\n      !excludedExtensionPattern.test(file) &&\r\n      !excludedFolderPattern.test(file) &&\r\n      !file.includes(\"@\") &&\r\n      !file.includes(\"node_modules\") //esto para que el Guille pueda correr el codigo de grafos.\r\n  );\r\n  matchingFiles.sort(); // sorted\r\n  //console.log(\"matchingFiles\", matchingFiles);\r\n  return matchingFiles;\r\n}",
      "importStatements": [],
      "codeNoBody": "async function getAllFiles(rootFolderPath: string): Promise<string[]>{\n           //...\n       }",
      "summary": "This async function named \"getAllFiles\" takes a root folder path as a parameter and returns a promise that resolves to an array of strings representing file paths. It uses various regular expressions to filter files based on their extensions, excluded extensions, and excluded folders. The function then reads the file system to get all files in the specified root folder, filters them based on the defined criteria, and returns the sorted list of matching file paths."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c::anyAssignments",
      "language": "typescript",
      "label": "anyAssignments",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c",
      "totalTokens": 64,
      "inDegree": 2,
      "outDegree": 1,
      "code": "anyAssignments = `\r\n(declaration\r\n    declarator: (\r\n        init_declarator\r\n            declarator: [\r\n                (identifier) @left\r\n                (pointer_declarator declarator: (identifier) @left)\r\n                ]\r\n            value: (_) @right\r\n        ) \r\n) @assignment\r\n`",
      "importStatements": [],
      "codeNoBody": "anyAssignments ={\n          //...\n      }",
      "summary": "Importing `treeSitterQueries` from './index', the `anyAssignments` assignment is a template string defining a tree-sitter query for a declaration with an identifier and a pointer declarator, capturing the left and right parts of the assignment."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c::calls",
      "language": "typescript",
      "label": "calls",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c",
      "totalTokens": 29,
      "inDegree": 0,
      "outDegree": 1,
      "code": "calls = `\r\n(call_expression function: _ @identifier.name)\r\n( _ arguments: (argument_list (identifier) @identifier.name) )\r\n`",
      "importStatements": [],
      "codeNoBody": "calls ={\n          //...\n      }",
      "summary": "The `calls` assignment contains a template string defining a call expression with a function and arguments, where the function is represented by an identifier. This assignment is part of the `treeSitterQueries` module imported from './index'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c::extraAssignmentCode",
      "language": "typescript",
      "label": "extraAssignmentCode",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c",
      "totalTokens": 73,
      "inDegree": 0,
      "outDegree": 1,
      "code": "const extraAssignmentCode = (name: string) => `\r\n( translation_unit\r\n    (expression_statement\r\n        (call_expression function:\r\n        \t[(identifier) @identifier.name\r\n             (field_expression (identifier)  @identifier.name  ) \r\n            ]\r\n        (#eq? @identifier.name \"${name}\")\r\n        ) @code\r\n    )\r\n)\r\n    `",
      "importStatements": [],
      "codeNoBody": "const extraAssignmentCode = (name: string) =>{\n    //...\n}",
      "summary": "The function `extraAssignmentCode` takes a `name` parameter and generates a specific code snippet using the provided name within a tree-sitter query template. It utilizes the `treeSitterQueries` import from the `index` file to construct the query template for a translation unit with an expression statement containing a call expression matching the given name."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c::exportClauses",
      "language": "typescript",
      "label": "exportClauses",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c",
      "totalTokens": 5,
      "inDegree": 0,
      "outDegree": 1,
      "code": "exportClauses = ``",
      "importStatements": [],
      "codeNoBody": "exportClauses ={\n          //...\n      }",
      "summary": "Exports an empty template string named `exportClauses` in the file, requiring the import of `treeSitterQueries` from './index'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c::constructorDefinitions",
      "language": "typescript",
      "label": "constructorDefinitions",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c",
      "totalTokens": 38,
      "inDegree": 0,
      "outDegree": 1,
      "code": "constructorDefinitions = `\r\n(function_definition) @function\r\n(declaration (function_declarator)) @function\r\n(struct_specifier) @struct\r\n(union_specifier) @union\r\n`",
      "importStatements": [],
      "codeNoBody": "constructorDefinitions ={\n          //...\n      }",
      "summary": "Importing `treeSitterQueries` from './index', the `constructorDefinitions` assignment contains regex patterns for function definitions, declarations, struct specifiers, and union specifiers, each tagged with their respective type for parsing and processing in the codebase."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c::definitionTemplate",
      "language": "typescript",
      "label": "definitionTemplate",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c",
      "totalTokens": 128,
      "inDegree": 0,
      "outDegree": 1,
      "code": "definitionTemplate = `\r\n( _\r\n    type: (_)? @return_type\r\n    [\r\n     name: (_) @name\r\n     declarator: (function_declarator declarator: (identifier) @name) \r\n    ]\r\n    parameters: (parameter_list (_) @param)?\r\n    body: (_)? @body\r\n)?\r\n\r\n; For global assignments\r\n(declaration\r\n    declarator: (\r\n        init_declarator\r\n            declarator: [\r\n                (identifier) @name\r\n                (pointer_declarator declarator: (identifier) @name)\r\n                ]\r\n            value: (_) @body\r\n        ) \r\n) \r\n`",
      "importStatements": [],
      "codeNoBody": "definitionTemplate ={\n          //...\n      }",
      "summary": "The `definitionTemplate` assignment in the `treeSitterQueries` import file defines a template for a function or global assignment with optional type, name, parameters, and body, as well as a global declaration with an optional initializer value."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c::assignments",
      "language": "typescript",
      "label": "assignments",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c",
      "totalTokens": 46,
      "inDegree": 0,
      "outDegree": 1,
      "code": "assignments = `\r\n(translation_unit\r\n\t(declaration\r\n    \tdeclarator: (init_declarator\r\n        \t\tdeclarator: (_)\r\n                value: (_)\r\n        \t) \r\n    ) @assignment\r\n)\r\n`",
      "importStatements": [],
      "codeNoBody": "assignments ={\n          //...\n      }",
      "summary": "The `assignments` assignment defines a translation unit with a declaration containing an init declarator with a declarator and value, marked with the `@assignment` tag. This code relies on the `treeSitterQueries` import from the `index` file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c::importStatements",
      "language": "typescript",
      "label": "importStatements",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\c",
      "totalTokens": 41,
      "inDegree": 0,
      "outDegree": 1,
      "code": "importStatements = `\r\n( preproc_include path: (system_lib_string) @module) @import_statement\r\n( preproc_include path: (string_literal (_) @module)) @import_statement\r\n\r\n`",
      "importStatements": [],
      "codeNoBody": "importStatements ={\n          //...\n      }",
      "summary": "The \"importStatements\" assignment contains predefined import statements for including modules and string literals, used in conjunction with the tree-sitterQueries import from the './index' file."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\index": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\index::languageQueries",
      "language": "typescript",
      "label": "languageQueries",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\index",
      "totalTokens": 36,
      "inDegree": 0,
      "outDegree": 1,
      "code": "languageQueries = {\r\n    Javascript: jsQueries,\r\n    Typescript: tsQueries,\r\n    Python: pyQueries,\r\n    Java: javaQueries,\r\n    C: cQueries\r\n}",
      "importStatements": [],
      "codeNoBody": "languageQueries ={\n                 //...\n             }",
      "summary": "This assignment defines an object `languageQueries` that contains queries for different programming languages, imported from separate files using import statements from \"./javascript\", \"./typescript\", \"./python\", \"./java\", and \"./c\"."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java::anyAssignments",
      "language": "typescript",
      "label": "anyAssignments",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java",
      "totalTokens": 50,
      "inDegree": 2,
      "outDegree": 1,
      "code": "anyAssignments = `\r\n(variable_declarator\r\n\tname: (identifier) @left\r\n    value: [\r\n    (identifier) @right\r\n    (object_creation_expression type: _ @right) \r\n    ] \r\n) @assignment\r\n`",
      "importStatements": [],
      "codeNoBody": "anyAssignments ={\n          //...\n      }",
      "summary": "Import `treeSitterQueries` from './index' to access the `anyAssignments` assignment, which defines a variable declarator with a name and a value that can be an identifier or an object creation expression, representing an assignment operation."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java::calls",
      "language": "typescript",
      "label": "calls",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java",
      "totalTokens": 29,
      "inDegree": 0,
      "outDegree": 1,
      "code": "calls = `\r\n(method_invocation) @identifier.name\r\n(type_identifier) @parameter_type\r\n( _ object: _ @identifier.name)\r\n`",
      "importStatements": [],
      "codeNoBody": "calls ={\n          //...\n      }",
      "summary": "The `calls` assignment in the file imports `treeSitterQueries` from './index' and defines a template for method invocations with placeholders for identifier names and parameter types."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java::extraAssignmentCode",
      "language": "typescript",
      "label": "extraAssignmentCode",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java",
      "totalTokens": 12,
      "inDegree": 0,
      "outDegree": 1,
      "code": "const extraAssignmentCode = (name: string) => ``",
      "importStatements": [],
      "codeNoBody": "const extraAssignmentCode = (name: string) =>{\n    //...\n}",
      "summary": "This function named \"extraAssignmentCode\" takes a parameter \"name\" of type string and returns an empty string."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java::exportClauses",
      "language": "typescript",
      "label": "exportClauses",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java",
      "totalTokens": 5,
      "inDegree": 0,
      "outDegree": 1,
      "code": "exportClauses = ``",
      "importStatements": [],
      "codeNoBody": "exportClauses ={\n          //...\n      }",
      "summary": "Exports an empty template string assigned to the variable `exportClauses`. This assignment is located in a file where `treeSitterQueries` is imported from './index'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java::constructorDefinitions",
      "language": "typescript",
      "label": "constructorDefinitions",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java",
      "totalTokens": 25,
      "inDegree": 0,
      "outDegree": 1,
      "code": "constructorDefinitions = `\r\n(constructor_declaration)? @function\r\n(method_declaration)? @function\r\n(class_declaration) @class\r\n`",
      "importStatements": [],
      "codeNoBody": "constructorDefinitions ={\n          //...\n      }",
      "summary": "This assignment defines constructor, method, and class declarations in the `constructorDefinitions` string using tree-sitter queries imported from `index`."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java::definitionTemplate",
      "language": "typescript",
      "label": "definitionTemplate",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java",
      "totalTokens": 52,
      "inDegree": 0,
      "outDegree": 1,
      "code": "definitionTemplate = `\r\n( _\r\n\t(modifiers) @modifier \r\n    type: (_)? @return_type\r\n    name: (_) @name\r\n    parameters: (formal_parameters (_) @param)?\r\n    body: (_) @body\r\n)?\r\n`",
      "importStatements": [],
      "codeNoBody": "definitionTemplate ={\n          //...\n      }",
      "summary": "The `definitionTemplate` assignment in the file imports `treeSitterQueries` from './index' and represents a template for defining a function with optional modifiers, return type, name, parameters, and body."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java::assignments",
      "language": "typescript",
      "label": "assignments",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java",
      "totalTokens": 3,
      "inDegree": 0,
      "outDegree": 1,
      "code": "assignments = ``",
      "importStatements": [],
      "codeNoBody": "assignments ={\n          //...\n      }",
      "summary": "Assignments variable storing an empty string, defined in the file where treeSitterQueries is imported from './index'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java::importStatements",
      "language": "typescript",
      "label": "importStatements",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\java",
      "totalTokens": 42,
      "inDegree": 0,
      "outDegree": 1,
      "code": "importStatements = `\r\n(import_declaration \r\n\t[(scoped_identifier\r\n    \tscope: (_) @module\r\n        name: (_) @name)\r\n    (identifier) @module\r\n    ]\r\n) @import_statement\r\n`",
      "importStatements": [],
      "codeNoBody": "importStatements ={\n          //...\n      }",
      "summary": "The `importStatements` assignment defines the structure of an import statement in a tree-sitter query language, including optional scoped identifiers and module names. The code uses an import statement to import `treeSitterQueries` from the `index` file."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript::anyAssignments",
      "language": "typescript",
      "label": "anyAssignments",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript",
      "totalTokens": 289,
      "inDegree": 2,
      "outDegree": 1,
      "code": "anyAssignments = `\r\n(assignment_expression\r\n\tleft: (identifier) @left\r\n    right: [\r\n    (identifier) @right\r\n    (member_expression) @right\r\n    (new_expression constructor: _ @right )\r\n    ] \r\n) @assignment\r\n\r\n(variable_declarator\r\n\tname: (identifier) @left\r\n    value: [\r\n    (identifier) @right\r\n    (member_expression) @right\r\n    (new_expression constructor: _ @right )\r\n    ] \r\n) @assignment\r\n\r\n; experimental, cases like object.forEach( o => ...), supports forEach, map and reduce\r\n(call_expression\r\n    function:\r\n    ( member_expression .\r\n      object: (identifier) @left\r\n      property: (property_identifier) @property\r\n      (#any-of? @property \"forEach\" \"map\")\r\n    )\r\n     arguments:\r\n     (arguments\r\n          (arrow_function parameters:\r\n            (formal_parameters . ((_) @right) ;first param\r\n           )\r\n         )\r\n    ) \r\n) @assignment\r\n\r\n(call_expression\r\n    function:\r\n    ( member_expression .\r\n      object: (identifier) @left\r\n      property: (property_identifier) @property\r\n      (#any-of? @property \"reduce\")\r\n    )\r\n     arguments:\r\n     (arguments\r\n          (arrow_function parameters:\r\n            (formal_parameters  ( (_) @right) . ;last param\r\n           )\r\n         )\r\n    ) \r\n) @assignment\r\n`",
      "importStatements": [],
      "codeNoBody": "anyAssignments ={\n          //...\n      }",
      "summary": "Defines the `anyAssignments` assignment with specific patterns for `assignment_expression`, `variable_declarator`, and `call_expression` supporting cases like `forEach`, `map`, and `reduce`. This assignment is based on the `treeSitterQueries` import from the `index` file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript::calls",
      "language": "typescript",
      "label": "calls",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript",
      "totalTokens": 117,
      "inDegree": 0,
      "outDegree": 1,
      "code": "calls = `\r\n; any call\r\n(call_expression function: (_) @identifier.name)\r\n\r\n; calls to member expressions \r\n(assignment_expression right: (member_expression) @identifier.name)\r\n\r\n; arguments\r\n(arguments (identifier) @identifier.name)\r\n\r\n; any member_expression\r\n( _ (member_expression) @identifier.name)\r\n\r\n; new_expression\r\n(new_expression (identifier) @identifier.name)\r\n\r\n; keyword arguments\r\n(pair value: (identifier) @identifier.name)\r\n( variable_declarator value: (identifier) @identifier.name)\r\n\r\n; any object\r\n( _ object: _ @identifier.name)\r\n`",
      "importStatements": [],
      "codeNoBody": "calls ={\n          //...\n      }",
      "summary": "The \"calls\" assignment in the file imports \"treeSitterQueries\" from './index' and defines patterns for call expressions, member expressions, arguments, member expressions, new expressions, keyword arguments, and objects, capturing identifiers as @identifier.name."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript::extraAssignmentCode",
      "language": "typescript",
      "label": "extraAssignmentCode",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript",
      "totalTokens": 73,
      "inDegree": 0,
      "outDegree": 1,
      "code": "const extraAssignmentCode = (name: string) => `\r\n( program\r\n    (expression_statement\r\n        (call_expression function:\r\n        \t[(identifier) @identifier.name\r\n             (member_expression object: (identifier) @identifier.name  ) \r\n            ]\r\n        (#eq? @identifier.name \"${name}\")\r\n        ) @code\r\n    )\r\n) \r\n`",
      "importStatements": [],
      "codeNoBody": "const extraAssignmentCode = (name: string) =>{\n    //...\n}",
      "summary": "This function `extraAssignmentCode` takes a `name` parameter and generates a specific code snippet using the provided `name` within a program structure. It utilizes the `treeSitterQueries` import from the `index` file to construct the code snippet."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript::exportClauses",
      "language": "typescript",
      "label": "exportClauses",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript",
      "totalTokens": 51,
      "inDegree": 0,
      "outDegree": 1,
      "code": "exportClauses = `\r\n( export_statement \r\n (export_clause (\r\n    export_specifier\r\n        name: (_) @name\r\n          alias: (_)? @alias\r\n          )\r\n    )\r\n  (string (string_fragment) @module)?\r\n)\r\n`",
      "importStatements": [],
      "codeNoBody": "exportClauses ={\n          //...\n      }",
      "summary": "ExportClauses is a string template defining the structure of export statements with export specifiers, names, and optional aliases, along with an optional module string, used in conjunction with the import statement importing treeSitterQueries from './index'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript::constructorDefinitions",
      "language": "typescript",
      "label": "constructorDefinitions",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript",
      "totalTokens": 52,
      "inDegree": 0,
      "outDegree": 1,
      "code": "constructorDefinitions = `\r\n; export\r\n(export_statement) @export\r\n\r\n; functions\r\n(function_declaration) @function\r\n\r\n; arrow functions\r\n${arrowFunctionConstructor} @function\r\n\r\n; classes\r\n(method_definition)? @method\r\n(class_declaration) @class\r\n`",
      "importStatements": [],
      "codeNoBody": "constructorDefinitions ={\n          //...\n      }",
      "summary": "Importing `treeSitterQueries` from './index', the `constructorDefinitions` assignment defines export statements, functions, arrow functions using `arrowFunctionConstructor`, and classes with optional method definitions, tagged respectively as @export, @function, @function, @method, and @class."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript::arrowFunctionConstructor",
      "language": "typescript",
      "label": "arrowFunctionConstructor",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript",
      "totalTokens": 20,
      "inDegree": 0,
      "outDegree": 1,
      "code": "arrowFunctionConstructor = \"(lexical_declaration (variable_declarator value: (arrow_function) ) )\"",
      "importStatements": [],
      "codeNoBody": "arrowFunctionConstructor ={\n          //...\n      }",
      "summary": "Imports `treeSitterQueries` from './index' and defines the `arrowFunctionConstructor` assignment as a lexical declaration with a variable declarator holding an arrow function value."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript::definitionTemplate",
      "language": "typescript",
      "label": "definitionTemplate",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript",
      "totalTokens": 94,
      "inDegree": 0,
      "outDegree": 1,
      "code": "definitionTemplate = `\r\n( _\r\n    name: (_) @name\r\n    parameters: (formal_parameters (_) @param)?\r\n    [body: (_)\r\n    ; for types\r\n    value: (_)] @body\r\n)?\r\n\r\n; arrow function\r\n(variable_declarator\r\n\tname: (_) @name\r\n\tvalue: (arrow_function\r\n    \tparameters: (formal_parameters (_) @param)?\r\n        body: (_)? @body\r\n\t\t\t)\r\n)?\r\n`",
      "importStatements": [],
      "codeNoBody": "definitionTemplate ={\n          //...\n      }",
      "summary": "This assignment named \"definitionTemplate\" in the file that imports \"treeSitterQueries\" from './index' defines a template for capturing the structure of a function or an arrow function, including the function's name, parameters, and body, with optional values for types and arrow functions."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript::assignments",
      "language": "typescript",
      "label": "assignments",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript",
      "totalTokens": 89,
      "inDegree": 0,
      "outDegree": 1,
      "code": "assignments = `\r\n(program\r\n    (_\r\n        (variable_declarator\r\n            name: (identifier)\r\n            value: (_ !body) ; to exclude arrow functions\r\n        ) @assignment\r\n    )\r\n) \r\n\r\n; exportables\r\n(program\r\n    (export_statement\r\n        (_\r\n            (variable_declarator\r\n                name: (identifier)\r\n                value: (_ !body)\r\n            ) @assignment\r\n        )\r\n    )\r\n)\r\n`",
      "importStatements": [],
      "codeNoBody": "assignments ={\n          //...\n      }",
      "summary": "The \"assignments\" assignment defines the structure for variable declarations excluding arrow functions and exportable variable declarations in a program using the Tree-sitter query language. It requires importing \"treeSitterQueries\" from the './index' file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript::importStatements",
      "language": "typescript",
      "label": "importStatements",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\javascript",
      "totalTokens": 210,
      "inDegree": 0,
      "outDegree": 1,
      "code": "importStatements = `\r\n(import_statement \r\n    (import_clause [\r\n    (namespace_import (identifier) @alias)\r\n    (identifier) @name\r\n    (named_imports (import_specifier\r\n\t\t    name: (_) @name\r\n    \t\talias: (_)? @alias))\r\n    ])?\r\n\tsource: (string (string_fragment) @module)\r\n) @import_statement\r\n\r\n\r\n(lexical_declaration\r\n    (variable_declarator\r\n      name: [\r\n          (identifier) @name\r\n          (object_pattern (_) @name)\r\n      ]\r\n      value: [(call_expression\r\n                  function: _ @function\r\n                  arguments: (arguments (string (string_fragment) @module))\r\n                  (#eq? @function \"require\"))\r\n              ( member_expression\r\n                (call_expression\r\n                    function: _ @function\r\n                    arguments: (arguments (string (string_fragment) @module))\r\n                    (#eq? @function \"require\")\r\n                )\r\n                (property_identifier) @submodule\r\n               )\r\n              ]\r\n    )           \r\n  ) @import_statement\r\n`",
      "importStatements": [],
      "codeNoBody": "importStatements ={\n          //...\n      }",
      "summary": "The \"importStatements\" assignment defines the structure for import statements in a tree-sitter query, including namespace imports, named imports, and the source module. It also specifies the structure for lexical declarations involving require calls with string arguments for module imports. The provided code example uses an import statement to import \"treeSitterQueries\" from the './index' module."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python::anyAssignments",
      "language": "typescript",
      "label": "anyAssignments",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python",
      "totalTokens": 64,
      "inDegree": 2,
      "outDegree": 1,
      "code": "anyAssignments = `\r\n(assignment\r\n    left: (identifier) @left\r\n    right: (_) @right\r\n) @assignment\r\n                          \r\n(function_definition\r\n  parameters: (\r\n  parameters( typed_parameter (\r\n              (identifier) @left)\r\n                  type: _ @right)\r\n  @assignment)\r\n)\r\n`",
      "importStatements": [],
      "codeNoBody": "anyAssignments ={\n          //...\n      }",
      "summary": "Import `treeSitterQueries` from './index' to access the `anyAssignments` assignment, which defines a structure for an assignment and a function definition with parameters in a specific format."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python::calls",
      "language": "typescript",
      "label": "calls",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python",
      "totalTokens": 303,
      "inDegree": 0,
      "outDegree": 1,
      "code": "calls = `\r\n; class and function calls\r\n(call function: ( (identifier) @identifier.name))\r\n\r\n; method calls like Class.method\r\n(call function: ( (attribute) @identifier.name))\r\n\r\n; self.parameter calls like self.parameter\r\n((attribute\r\n    object: (identifier) @object\r\n    attribute: (identifier) @property\r\n    (#eq? @object \"self\")) @identifier.name)\r\n\r\n\r\n; class extensions\r\n(class_definition\r\n    superclasses : (argument_list (_) @class.extends)?\r\n    body: (block\r\n            (function_definition name: _ @class.method)?)) @class.definition\r\n\r\n; pydantic like parameters                                        \r\n(class_definition\r\n        superclasses : (argument_list (_) @class.extends)?\r\n        body: (block\r\n                (expression_statement\r\n                    (assignment type: (_)? @parameter_type) @assignment))\r\n        ) @class.definition\r\n\r\n; typed parameters and return types\r\n(function_definition\r\n    parameters: (parameters( typed_parameter type: _ @parameter_type)?)\r\n    return_type: (_)? @return_type) @function.definiton\r\n\r\n; assignments where they are identifiers\r\n(expression_statement\r\n\t(assignment right: (identifier) @identifier.name)\r\n)\r\n\r\n; keyword arguments\r\n(keyword_argument  value: (identifier) @identifier.name)\r\n\r\n; any attribute\r\n(_ (attribute) @identifier.name)\r\n\r\n; arguments (identifier only)\r\n(argument_list (identifier) @identifier.name)\r\n\r\n; any object name\r\n( _ object: _ @identifier.name)\r\n`",
      "importStatements": [],
      "codeNoBody": "calls ={\n          //...\n      }",
      "summary": "The \"calls\" assignment in the file imports \"treeSitterQueries\" from './index' and includes definitions for class and function calls, method calls, self.parameter calls, class extensions, pydantic-like parameters, typed parameters and return types, assignments with identifiers, keyword arguments, any attribute, arguments, and any object name."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python::extraAssignmentCode",
      "language": "typescript",
      "label": "extraAssignmentCode",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python",
      "totalTokens": 138,
      "inDegree": 0,
      "outDegree": 1,
      "code": "const extraAssignmentCode = (name: string) => `\r\n( module\r\n  (expression_statement\r\n      (call function:\r\n        [(identifier) @identifier.name\r\n           (attribute object: (identifier) @identifier.name  ) \r\n          ]\r\n      (#eq? @identifier.name \"${name}\")\r\n      ) @code\r\n  )\r\n) \r\n\r\n; not used\r\n;( module\r\n;  ( decorated_definition\r\n;\t(decorator [\r\n;    \t( call (attribute object: _ @identifier.name)) \r\n;        (attribute object: _ @identifier.name)\r\n;    \t]) @code\r\n;    (#eq? @identifier.name \"${name}\")\r\n;  )\r\n;)\r\n`",
      "importStatements": [],
      "codeNoBody": "const extraAssignmentCode = (name: string) =>{\n    //...\n}",
      "summary": "The function `extraAssignmentCode` takes a `name` parameter and generates a specific code snippet using the provided name. It constructs a module with an expression statement that calls a function with the given name as an argument. The function returns the generated code snippet as a string."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python::constructorDefinitions",
      "language": "typescript",
      "label": "constructorDefinitions",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python",
      "totalTokens": 18,
      "inDegree": 0,
      "outDegree": 1,
      "code": "constructorDefinitions = `\r\n(function_definition) @function\r\n(class_definition) @class\r\n`",
      "importStatements": [],
      "codeNoBody": "constructorDefinitions ={\n          //...\n      }",
      "summary": "Importing `treeSitterQueries` from './index', the `constructorDefinitions` assignment defines a template for function and class definitions using the specified syntax."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python::definitionTemplate",
      "language": "typescript",
      "label": "definitionTemplate",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python",
      "totalTokens": 80,
      "inDegree": 0,
      "outDegree": 1,
      "code": "definitionTemplate = `\r\n( _\r\n      name: (identifier) @name\r\n      parameters: (parameters (_) @param)?\r\n      return_type: _? @return_type\r\n      body: (block . (expression_statement (string) @documentation)? .\r\n          _ ) @body )\r\n\r\n; For global assignments   \r\n(expression_statement\r\n\t(assignment left: (identifier) @name)\r\n      )\r\n`",
      "importStatements": [],
      "codeNoBody": "definitionTemplate ={\n          //...\n      }",
      "summary": "This assignment named \"definitionTemplate\" defines a template for a function definition in a specific format using tree-sitter queries. It includes fields for the function name, parameters, return type, body, and documentation. It also provides a structure for global assignments using an import statement from './index'."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python::assignments",
      "language": "typescript",
      "label": "assignments",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python",
      "totalTokens": 31,
      "inDegree": 0,
      "outDegree": 1,
      "code": "assignments = `\r\n(module (expression_statement\r\n\t(assignment left: (identifier)\r\n    \t\t      right: (_)) \r\n      ) @assignment\r\n)\r\n`",
      "importStatements": [],
      "codeNoBody": "assignments ={\n          //...\n      }",
      "summary": "The `assignments` assignment contains a module with an expression statement defining an assignment operation between an identifier on the left side and an unspecified expression on the right side, identified by the label `@assignment`. This code snippet relies on the `treeSitterQueries` import from the `index` file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python::importStatements",
      "language": "typescript",
      "label": "importStatements",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\python",
      "totalTokens": 143,
      "inDegree": 0,
      "outDegree": 1,
      "code": "importStatements = `\r\n(import_statement\r\n\tname: [\r\n      (dotted_name) @module\r\n      (aliased_import name: _ @module alias: _ @alias)\r\n    ] ) @import_statement\r\n\r\n(import_from_statement\r\n\tmodule_name: _ @module\r\n\tname: [\r\n      (dotted_name) @name\r\n      (aliased_import name: _ @name alias: _ @alias)\r\n    ]?\r\n    (wildcard_import _ @wildcard)?\r\n    ) @import_statement\r\n    \r\n(future_import_statement \r\n\tname: [\r\n\t\t(dotted_name) @name\r\n\t\t(aliased_import name: _ @name alias: _ @alias)\r\n    ]) @import_statement\r\n`",
      "importStatements": [],
      "codeNoBody": "importStatements ={\n          //...\n      }",
      "summary": "Defines a template string `importStatements` containing three types of import statements: `import_statement`, `import_from_statement`, and `future_import_statement`, each with specific structure and optional elements, used for defining import rules in a tree-sitter grammar. The assignment is used in a file that imports `treeSitterQueries` from `'./index'`."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript::anyAssignments",
      "language": "typescript",
      "label": "anyAssignments",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript",
      "totalTokens": 51,
      "inDegree": 2,
      "outDegree": 1,
      "code": "anyAssignments = jsQueries.assignments + `\r\n(function_declaration\r\n\tparameters: (formal_parameters \r\n    \t(_\r\n        \t(identifier) @left\r\n        \t(type_annotation (type_identifier) @right)\r\n        ) @assignment) \r\n)\r\n`",
      "importStatements": [],
      "codeNoBody": "anyAssignments ={\n          //...\n      }",
      "summary": "This assignment appends a new function declaration to the existing `jsQueries.assignments` string, specifying parameters with identifiers and type annotations, and is stored in the `anyAssignments` variable. It relies on imports from './javascript' and './index' for `jsQueries` and `treeSitterQueries`, respectively."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript::calls",
      "language": "typescript",
      "label": "calls",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript",
      "totalTokens": 37,
      "inDegree": 0,
      "outDegree": 1,
      "code": "calls = jsQueries.calls + `\r\n; type identifiers: IMPORTANT! for classes this means a call to itself! we need to remove it\r\n(type_identifier) @parameter_type\r\n`",
      "importStatements": [],
      "codeNoBody": "calls ={\n          //...\n      }",
      "summary": "Assigns the concatenated value of `jsQueries.calls` and a specific string to the variable `calls`. The string includes instructions regarding type identifiers and parameters. The assignment relies on the imported `jsQueries` object from the './javascript' file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript::extraAssignmentCode",
      "language": "typescript",
      "label": "extraAssignmentCode",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript",
      "totalTokens": 9,
      "inDegree": 0,
      "outDegree": 1,
      "code": "extraAssignmentCode = jsQueries.extraAssignmentCode",
      "importStatements": [],
      "codeNoBody": "extraAssignmentCode ={\n          //...\n      }",
      "summary": "Assigns the value of `jsQueries.extraAssignmentCode` to the variable `extraAssignmentCode`. This assignment relies on the import statement `import { jsQueries } from './javascript';`."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript::exportClauses",
      "language": "typescript",
      "label": "exportClauses",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript",
      "totalTokens": 9,
      "inDegree": 0,
      "outDegree": 1,
      "code": "exportClauses = jsQueries.exportClauses",
      "importStatements": [],
      "codeNoBody": "exportClauses ={\n          //...\n      }",
      "summary": "Exports the `exportClauses` variable from the `jsQueries` module imported from the './javascript' file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript::constructorDefinitions",
      "language": "typescript",
      "label": "constructorDefinitions",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript",
      "totalTokens": 103,
      "inDegree": 0,
      "outDegree": 1,
      "code": "constructorDefinitions = jsQueries.constructorDefinitions + `\r\n; interfaces\r\n(method_signature)? @function\r\n(interface_declaration) @interface\r\n\r\n; enums\r\n(enum_declaration) @enum\r\n\r\n; type\r\n(program\r\n    ( type_alias_declaration\r\n        name: (_)\r\n        value: (_ !body)\r\n    ) @type\r\n) \r\n\r\n; type exportables\r\n(program\r\n    (export_statement\r\n        ( type_alias_declaration\r\n            name: (_)\r\n            value: (_ !body)\r\n        ) @type\r\n    )\r\n)\r\n`",
      "importStatements": [],
      "codeNoBody": "constructorDefinitions ={\n          //...\n      }",
      "summary": "This assignment, `constructorDefinitions`, extends `jsQueries.constructorDefinitions` by defining rules for interfaces, enums, and type aliases, including exportable type aliases. It relies on imports from './javascript' and './index' for `jsQueries` and `treeSitterQueries`, respectively."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript::definitionTemplate",
      "language": "typescript",
      "label": "definitionTemplate",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript",
      "totalTokens": 126,
      "inDegree": 0,
      "outDegree": 1,
      "code": "definitionTemplate = `\r\n( _\r\n    name: (_) @name\r\n    parameters: (formal_parameters (_) @param)?\r\n    return_type: (type_annotation)? @return_type\r\n    ; method signatures has no body\r\n    [body: (_)\r\n    ; for types\r\n    value: (_)] @body\r\n)?\r\n\r\n; arrow function\r\n(variable_declarator\r\n\tname: (_) @name\r\n\tvalue: (arrow_function\r\n    \tparameters: (formal_parameters (_) @param)?\r\n        return_type: (type_annotation)? @return_type\r\n        body: (_)? @body\r\n\t\t\t)\r\n)?\r\n`",
      "importStatements": [],
      "codeNoBody": "definitionTemplate ={\n          //...\n      }",
      "summary": "The `definitionTemplate` assignment in the file imports `jsQueries` from './javascript' and `treeSitterQueries` from './index'. It defines a template for method and arrow function signatures, specifying name, parameters, return type, and body structure. Method signatures have no body, while arrow functions include parameters, return type, and an optional body."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript::importStatements",
      "language": "typescript",
      "label": "importStatements",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\queries\\typescript",
      "totalTokens": 7,
      "inDegree": 0,
      "outDegree": 1,
      "code": "importStatements = jsQueries.importStatements",
      "importStatements": [],
      "codeNoBody": "importStatements ={\n          //...\n      }",
      "summary": "Assigns the import statements from the 'javascript' file to the variable 'importStatements' using the 'jsQueries' import."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph-test": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph-test::repoRequestValidator",
      "language": "typescript",
      "label": "repoRequestValidator",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph-test",
      "totalTokens": 63,
      "inDegree": 2,
      "outDegree": 1,
      "code": "repoRequestValidator = zValidator(\r\n  'json',\r\n  z.object({\r\n    git_provider: z.enum(['github', 'gitlab', 'bitbucket']),\r\n    repo_org: z.string(),\r\n    repo_name: z.string(),\r\n    branch: z.string(),\r\n    connection_id: z.string()\r\n  })\r\n)",
      "importStatements": [],
      "codeNoBody": "repoRequestValidator ={\n          //...\n      }",
      "summary": "The `repoRequestValidator` assignment, imported from `@hono/zod-validator`, validates a JSON object with properties `git_provider` (enum of 'github', 'gitlab', 'bitbucket'), `repo_org`, `repo_name`, `branch`, and `connection_id` using Zod schema validation."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph-test::secret",
      "language": "typescript",
      "label": "secret",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph-test",
      "totalTokens": 11,
      "inDegree": 2,
      "outDegree": 1,
      "code": "secret = getEnv('SUPABASE_JWT')",
      "importStatements": [],
      "codeNoBody": "secret ={\n          //...\n      }",
      "summary": "Assigns the value of the environment variable 'SUPABASE_JWT' to the variable 'secret' using the 'getEnv' function imported from '../utils/utils'."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph::processGraphCreation",
      "language": "typescript",
      "label": "processGraphCreation",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph",
      "totalTokens": 693,
      "inDegree": 2,
      "outDegree": 1,
      "code": "async function processGraphCreation({\r\n  gitProvider,\r\n  repoId,\r\n  userOrgId,\r\n  userId,\r\n  graphExists,\r\n  connectionId,\r\n  codebasePath\r\n}: {\r\n  gitProvider: GitServiceType\r\n  repoId: string\r\n  userOrgId: string\r\n  userId: string\r\n  graphExists: boolean,\r\n  connectionId: string,\r\n  codebasePath: string\r\n}) {\r\n  let graphId = uuidv4()\r\n  try {\r\n    const status = graphExists ? 'completed' : 'pending'\r\n\r\n    // graph does not exist\r\n    if (!codebasePath) {\r\n      console.log('Failed to download repo')\r\n      return\r\n    }\r\n\r\n    const graph: Record<string, string | number> = {\r\n      id: graphId,\r\n      repo_id: repoId,\r\n      status,\r\n      org_id: userOrgId,\r\n      user_id: userId\r\n    }\r\n\r\n    if (gitProvider === 'github') graph.github_connection_id = Number(connectionId)\r\n    else if (gitProvider === 'gitlab') graph.gitlab_connection_id = Number(connectionId)\r\n    else if (gitProvider === 'bitbucket') graph.bitbucket_connection_id = connectionId\r\n\r\n    await sql`INSERT INTO graphs ${sql([graph])}`\r\n\r\n    if (graphExists) {\r\n      console.log('Graph creation completed:', graphId)\r\n      return\r\n    }\r\n\r\n\r\n    const codebase = new Codebase(codebasePath)\r\n    const fileNodesMap = await codebase.parseFolder()\r\n    codebase.getCalls(fileNodesMap, false)\r\n    const nodes = codebase.simplify()\r\n\r\n    // create a uuid for each node\r\n    const nodeDBIds: { [key: string]: string } = {}\r\n    for (const node of nodes) {\r\n      nodeDBIds[node.id] = uuidv4()\r\n    }\r\n\r\n    // Insert nodes into the database, note that the node.id is now the full_name\r\n    const insertNodePromises = nodes.map((node) => {\r\n      const fullName = node.id.replace(codebasePath, '')\r\n      return sql`\r\n    INSERT INTO nodes (id, repo_id, type, language, total_tokens, documentation, code, code_no_body, in_degree, out_degree, full_name, label)\r\n    VALUES (${nodeDBIds[node.id]}, ${repoId}, ${node.type}, ${node.language}, ${node.totalTokens\r\n        }, ${node.documentation}, ${node.code}, ${node.codeNoBody}, ${node.inDegree}, ${node.outDegree\r\n        }, ${fullName}, ${node.label})\r\n    `\r\n    })\r\n\r\n    const links = codebase.getLinks()\r\n    // Insert links into the database\r\n    const insertLinkPromises = links.map((link) => {\r\n      return sql`\r\n    INSERT INTO links (node_source_id, node_target_id, repo_id, label)\r\n    VALUES (${nodeDBIds[link.source]}, ${nodeDBIds[link.target]}, ${repoId}, ${link.label})\r\n    `\r\n    })\r\n\r\n    await Promise.all(insertNodePromises)\r\n    await Promise.all(insertLinkPromises)\r\n\r\n    await sql`UPDATE graphs SET status = 'completed' WHERE id = ${graphId}`\r\n    console.log('Graph creation completed:', graphId)\r\n  } catch (error) {\r\n    console.error('Error in background processing:', error)\r\n    await sql`UPDATE graphs SET status = 'failed' WHERE id = ${graphId}`\r\n  }\r\n}",
      "importStatements": [],
      "codeNoBody": "async function processGraphCreation({\r\n  gitProvider,\r\n  repoId,\r\n  userOrgId,\r\n  userId,\r\n  graphExists,\r\n  connectionId,\r\n  codebasePath\r\n}: {\r\n  gitProvider: GitServiceType\r\n  repoId: string\r\n  userOrgId: string\r\n  userId: string\r\n  graphExists: boolean,\r\n  connectionId: string,\r\n  codebasePath: string\r\n}){\n    //...\n}",
      "summary": "This async function `processGraphCreation` takes in parameters `gitProvider`, `repoId`, `userOrgId`, `userId`, `graphExists`, `connectionId`, and `codebasePath`. It generates a unique `graphId`, determines the status of the graph, inserts graph and node data into the database, and handles errors accordingly. It also interacts with a `Codebase` class to parse a folder, extract nodes and links, and store them in the database using SQL queries. The function relies on imports from `../utils/db`, `../model/codebase`, and `../utils/git`."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph::repoRequestValidator",
      "language": "typescript",
      "label": "repoRequestValidator",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph",
      "totalTokens": 74,
      "inDegree": 2,
      "outDegree": 1,
      "code": "repoRequestValidator = zValidator(\r\n  'json',\r\n  z.object({\r\n    git_provider: z.enum(['github', 'gitlab', 'bitbucket']),\r\n    repo_org: z.string(),\r\n    repo_name: z.string(),\r\n    branch: z.string(),\r\n    connection_id: z.string(),\r\n    gitlab_repo_id: z.number().optional()\r\n  })\r\n)",
      "importStatements": [],
      "codeNoBody": "repoRequestValidator ={\n          //...\n      }",
      "summary": "The `repoRequestValidator` assignment uses the `zValidator` function from the `@hono/zod-validator` import to validate a JSON object containing properties like `git_provider`, `repo_org`, `repo_name`, `branch`, `connection_id`, and an optional `gitlab_repo_id` if the git provider is GitLab."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph::secret",
      "language": "typescript",
      "label": "secret",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\create_graph",
      "totalTokens": 11,
      "inDegree": 2,
      "outDegree": 1,
      "code": "secret = getEnv('SUPABASE_JWT')",
      "importStatements": [],
      "codeNoBody": "secret ={\n          //...\n      }",
      "summary": "Assigns the value of the environment variable 'SUPABASE_JWT' to the variable 'secret' using the 'getEnv' function imported from '../utils/utils'."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\routes\\graphs": [],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\bitbucket\\refresh-token": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\bitbucket\\refresh-token::refreshAccessToken",
      "language": "typescript",
      "label": "refreshAccessToken",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\bitbucket\\refresh-token",
      "totalTokens": 245,
      "inDegree": 0,
      "outDegree": 1,
      "code": "async function refreshAccessToken(refreshToken: string): Promise<any> {\r\n  try {\r\n    const rawBody = {\r\n      refresh_token: refreshToken,\r\n      grant_type: 'refresh_token',\r\n      client_id: getEnv('BITBUCKET_KEY'),\r\n      client_secret: getEnv('BITBUCKET_SECRET')\r\n    }\r\n\r\n    const body = Object.entries(rawBody)\r\n      .map(([key, value]) => `${key}=${value}`)\r\n      .join('&')\r\n\r\n    const res = await fetch('https://bitbucket.org/site/oauth2/access_token', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n      },\r\n      body\r\n    })\r\n\r\n    if (res.ok) {\r\n      const { access_token: newAccessToken, refresh_token: newRefreshToken } = await res.json()\r\n\r\n      return {\r\n        newAccessToken,\r\n        newRefreshToken\r\n      }\r\n    } else {\r\n      const data = await res.json()\r\n      console.error('Error al renovar el token de acceso:', data)\r\n      return null\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al renovar el token de acceso:', error)\r\n    return null\r\n  }\r\n}",
      "importStatements": [],
      "codeNoBody": "async function refreshAccessToken(refreshToken: string): Promise<any>{\n           //...\n       }",
      "summary": "Imports the `getEnv` function from \"../utils\" to retrieve the Bitbucket API key and secret, then sends a POST request to refresh the access token using the provided `refreshToken`. If successful, returns the new access and refresh tokens; otherwise, logs an error message and returns null."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\db": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\db::sql",
      "language": "typescript",
      "label": "sql",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\db",
      "totalTokens": 106,
      "inDegree": 0,
      "outDegree": 1,
      "code": "sql = postgres({\r\n  host: getEnv('DATABASE_HOST'),\r\n  database: getEnv('DATABASE_NAME'),\r\n  port: Number(getEnv('DATABASE_PORT')),\r\n  user: getEnv('DATABASE_USERNAME'),\r\n  password: getEnv('DATABASE_PASSWORD'),\r\n  prepare: false,\r\n  connect_timeout: 60,\r\n  idle_timeout: 60,\r\n  ssl: {\r\n    ca: getEnv('SUPABASE_CA_CERTIFICATE')\r\n  }\r\n  // ssl: {\r\n  //   rejectUnauthorized: false\r\n  // }\r\n})",
      "importStatements": [],
      "codeNoBody": "sql ={\n                 //...\n             }",
      "summary": "The assignment \"sql\" is a configuration object for connecting to a PostgreSQL database using the \"postgres\" library, with parameters for host, database name, port, username, password, connection settings, and SSL configuration using the \"getEnv\" function from the 'utils' file."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\git": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\git::getCommitHash",
      "language": "typescript",
      "label": "getCommitHash",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\git",
      "totalTokens": 89,
      "inDegree": 1,
      "outDegree": 1,
      "code": "function getCommitHash(provider: 'github' | 'gitlab' | 'bitbucket', data: any): string {\r\n  if (provider === 'github') {\r\n    return data[0].sha\r\n  } else if (provider === 'gitlab') {\r\n    return data[0].id\r\n  } else if (provider === 'bitbucket') {\r\n    return data.values[0].hash\r\n  }\r\n\r\n  return ''\r\n}",
      "importStatements": [],
      "codeNoBody": "function getCommitHash(provider: 'github' | 'gitlab' | 'bitbucket', data: any): string{\n    //...\n}",
      "summary": "The function `getCommitHash` takes in a `provider` parameter specifying the source control platform ('github', 'gitlab', or 'bitbucket') and a `data` parameter containing the relevant commit information. It returns the commit hash based on the provider: for 'github', it retrieves the SHA from the first element of the data array; for 'gitlab', it fetches the ID from the first element of the data array; and for 'bitbucket', it accesses the hash from the values array within the data object. If the provider is not recognized, an empty string is returned. The function does not require any import statements."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\git::MAXSIZE",
      "language": "typescript",
      "label": "MAXSIZE",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\git",
      "totalTokens": 5,
      "inDegree": 0,
      "outDegree": 1,
      "code": "MAXSIZE = 2",
      "importStatements": [],
      "codeNoBody": "MAXSIZE ={\n          //...\n      }",
      "summary": "The assignment `MAXSIZE` is set to the value `2`."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\gitlab\\refresh-token": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\gitlab\\refresh-token::refreshAccessToken",
      "language": "typescript",
      "label": "refreshAccessToken",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\gitlab\\refresh-token",
      "totalTokens": 237,
      "inDegree": 0,
      "outDegree": 1,
      "code": "async function refreshAccessToken(refreshToken: string): Promise<any> {\r\n  try {\r\n    const url = new URL('https://gitlab.com/oauth/token')\r\n    url.searchParams.set('refresh_token', refreshToken)\r\n    url.searchParams.set('grant_type', 'refresh_token')\r\n    url.searchParams.set('client_id', getEnv('GITLAB_APP_ID'))\r\n    url.searchParams.set('client_secret', getEnv('GITLAB_SECRET_ID'))\r\n\r\n    const res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Accept: 'application/json'\r\n      }\r\n    })\r\n\r\n    if (res.ok) {\r\n      const { access_token: newAccessToken, refresh_token: newRefreshToken } = await res.json()\r\n\r\n      return {\r\n        newAccessToken,\r\n        newRefreshToken\r\n      }\r\n    } else {\r\n      const data = await res.json()\r\n      console.error('Error al renovar el token de acceso:', data)\r\n      return null\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al renovar el token de acceso:', error)\r\n    return null\r\n  }\r\n}",
      "importStatements": [],
      "codeNoBody": "async function refreshAccessToken(refreshToken: string): Promise<any>{\n           //...\n       }",
      "summary": "This async function named \"refreshAccessToken\" takes a string parameter \"refreshToken\" and sends a POST request to the GitLab API to refresh the access token using the provided refresh token. It utilizes the \"getEnv\" function to retrieve the GitLab app ID and secret ID, then returns a Promise resolving to an object containing the new access token and refresh token if the request is successful; otherwise, it logs an error message and returns null."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\utils": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\utils::ENV_VARS",
      "language": "typescript",
      "label": "ENV_VARS",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\utils\\utils",
      "totalTokens": 145,
      "inDegree": 1,
      "outDegree": 1,
      "code": "ENV_VARS = {\r\n\r\n  DATABASE_USERNAME: process.env.DATABASE_USERNAME,\r\n  DATABASE_PASSWORD: process.env.DATABASE_PASSWORD,\r\n  DATABASE_HOST: process.env.DATABASE_HOST,\r\n  DATABASE_PORT: process.env.DATABASE_PORT,\r\n  DATABASE_NAME: process.env.DATABASE_NAME,\r\n  SUPABASE_CA_CERTIFICATE: process.env.SUPABASE_CA_CERTIFICATE,\r\n  SUPABASE_JWT: process.env.SUPABASE_JWT,\r\n  GITLAB_APP_ID: process.env.GITLAB_APP_ID,\r\n  GITLAB_SECRET_ID: process.env.GITLAB_SECRET_ID,\r\n  BITBUCKET_KEY: process.env.BITBUCKET_KEY,\r\n  BITBUCKET_SECRET: process.env.BITBUCKET_SECRET,\r\n}",
      "importStatements": [],
      "codeNoBody": "ENV_VARS ={\n                 //...\n             }",
      "summary": "Documentation for ENV_VARS: Defines an object containing various environment variables related to database connection details, Supabase configuration, GitLab and Bitbucket authentication credentials, sourced from the process environment variables."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::findStartNodes",
      "language": "typescript",
      "label": "findStartNodes",
      "type": "function",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 48,
      "inDegree": 1,
      "outDegree": 1,
      "code": "function findStartNodes(callGraph: { [key: string]: string[] }) {\r\n  return Object.keys(callGraph).filter((node) => callGraph[node].length === 0); //get nodes that don't call anyone.\r\n}",
      "importStatements": [],
      "codeNoBody": "function findStartNodes(callGraph: { [key: string]: string[] }){\n    //...\n}",
      "summary": "The function \"findStartNodes\" takes a call graph object as a parameter and returns an array of nodes that do not call any other nodes. It uses the Object.keys method to iterate over the keys of the callGraph object and filters out nodes with an empty array of calls using the filter method."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::totalTokensUsed",
      "language": "typescript",
      "label": "totalTokensUsed",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 6,
      "inDegree": 1,
      "outDegree": 1,
      "code": "totalTokensUsed = 0",
      "importStatements": [],
      "codeNoBody": "totalTokensUsed ={\n        //...\n    }",
      "summary": "The assignment `totalTokensUsed` initializes a variable to store the total number of tokens used, which is set to 0."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::linksPath",
      "language": "typescript",
      "label": "linksPath",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 14,
      "inDegree": 1,
      "outDegree": 1,
      "code": "linksPath: string = `${forder_path}/${projectId}/links.json`",
      "importStatements": [],
      "codeNoBody": "linksPath: string ={\n          //...\n      }",
      "summary": "The `linksPath` assignment in the file requires the import of `forder_path` from an external source and concatenates it with the `projectId` to form the path to the `links.json` file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::nodesPath",
      "language": "typescript",
      "label": "nodesPath",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 14,
      "inDegree": 1,
      "outDegree": 1,
      "code": "nodesPath: string = `${forder_path}/${projectId}/nodes.json`",
      "importStatements": [],
      "codeNoBody": "nodesPath: string ={\n          //...\n      }",
      "summary": "The `nodesPath` assignment in the file requires the import of `forder_path` and `projectId` to construct the path to the `nodes.json` file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::forder_path",
      "language": "typescript",
      "label": "forder_path",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 9,
      "inDegree": 0,
      "outDegree": 1,
      "code": "forder_path = `../../test_files/`",
      "importStatements": [],
      "codeNoBody": "forder_path ={\n          //...\n      }",
      "summary": "The assignment `forder_path` is a string containing the path `../../test_files/` and is defined in a file that imports `AllowedTypes` from \"../model/consts\"."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::projectId",
      "language": "typescript",
      "label": "projectId",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 8,
      "inDegree": 0,
      "outDegree": 1,
      "code": "projectId = \"codebase-index-ts\"",
      "importStatements": [],
      "codeNoBody": "projectId ={\n          //...\n      }",
      "summary": "The `projectId` variable is assigned the string value `\"codebase-index-ts\"` and is used in the file where the `AllowedTypes` import statement is defined."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::onlyLogs",
      "language": "typescript",
      "label": "onlyLogs",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 4,
      "inDegree": 0,
      "outDegree": 1,
      "code": "onlyLogs = false",
      "importStatements": [],
      "codeNoBody": "onlyLogs ={\n          //...\n      }",
      "summary": "The assignment `onlyLogs` is set to `false` and is defined in the file with imports from \"../model/consts\" for AllowedTypes, \"fs\" for fs2, \"path\" for path2, \"openai\" for OpenAI2, \"tiktoken/lite\" for Tiktoken, and \"tiktoken/encoders/cl100k_base.json\" for cl100k_base."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::response_format",
      "language": "typescript",
      "label": "response_format",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 11,
      "inDegree": 0,
      "outDegree": 1,
      "code": "response_format = { type: \"json_object\" }",
      "importStatements": [],
      "codeNoBody": "response_format ={\n          //...\n      }",
      "summary": "The assignment `response_format` is defined as an object with a property `type` set to the string value `\"json_object\"`."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::max_tokens",
      "language": "typescript",
      "label": "max_tokens",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 6,
      "inDegree": 0,
      "outDegree": 1,
      "code": "max_tokens = 1024",
      "importStatements": [],
      "codeNoBody": "max_tokens ={\n          //...\n      }",
      "summary": "Defines the constant `max_tokens` with a value of 1024."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::temperature",
      "language": "typescript",
      "label": "temperature",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 4,
      "inDegree": 0,
      "outDegree": 1,
      "code": "temperature = 0",
      "importStatements": [],
      "codeNoBody": "temperature ={\n          //...\n      }",
      "summary": "The assignment \"temperature\" is initialized with a value of 0."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::model",
      "language": "typescript",
      "label": "model",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 13,
      "inDegree": 0,
      "outDegree": 1,
      "code": "model = \"gpt-3.5-turbo\"",
      "importStatements": [],
      "codeNoBody": "model ={\n          //...\n      }",
      "summary": "The assignment `model` is set to the string value \"gpt-3.5-turbo\" using TypeScript. The import statement `import { AllowedTypes } from \"../model/consts\";` is used in the file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::startTime",
      "language": "typescript",
      "label": "startTime",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 5,
      "inDegree": 1,
      "outDegree": 1,
      "code": "startTime = new Date()",
      "importStatements": [],
      "codeNoBody": "startTime ={\n          //...\n      }",
      "summary": "Initialize a new Date object to store the current date and time when the `startTime` assignment is executed."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::cl100k_base",
      "language": "typescript",
      "label": "cl100k_base",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 19,
      "inDegree": 1,
      "outDegree": 1,
      "code": "cl100k_base = require(\"tiktoken/encoders/cl100k_base.json\")",
      "importStatements": [],
      "codeNoBody": "cl100k_base ={\n          //...\n      }",
      "summary": "Import the \"cl100k_base\" assignment from the \"tiktoken/encoders/cl100k_base.json\" file using the require method."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::OpenAI2",
      "language": "typescript",
      "label": "OpenAI2",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 9,
      "inDegree": 2,
      "outDegree": 1,
      "code": "OpenAI2 = require(\"openai\")",
      "importStatements": [],
      "codeNoBody": "OpenAI2 ={\n          //...\n      }",
      "summary": "Importing the \"openai\" library, the assignment \"OpenAI2\" is defined, utilizing the CommonJS `require` method."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::path2",
      "language": "typescript",
      "label": "path2",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 7,
      "inDegree": 1,
      "outDegree": 1,
      "code": "path2 = require(\"path\")",
      "importStatements": [],
      "codeNoBody": "path2 ={\n          //...\n      }",
      "summary": "Importing the \"path\" module, the assignment \"path2\" provides access to Node.js's path functionality for handling and transforming file paths."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2::fs2",
      "language": "typescript",
      "label": "fs2",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\src\\wiki\\wiki2",
      "totalTokens": 9,
      "inDegree": 2,
      "outDegree": 1,
      "code": "fs2 = require(\"fs\").promises",
      "importStatements": [],
      "codeNoBody": "fs2 ={\n          //...\n      }",
      "summary": "Importing the `fs` module with promises enabled, the assignment `fs2` provides an asynchronous API for file system operations, facilitating non-blocking I/O operations in the codebase."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\c.test": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\c.test::nodeAttributes",
      "language": "typescript",
      "label": "nodeAttributes",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\c.test",
      "totalTokens": 39,
      "inDegree": 1,
      "outDegree": 1,
      "code": "nodeAttributes = ['id', 'type', 'name', 'label', 'language', 'exportable', 'documentation', 'code', 'parent', 'inDegree', 'outDegree']",
      "importStatements": [],
      "codeNoBody": "nodeAttributes ={\n          //...\n      }",
      "summary": "The `nodeAttributes` array includes attributes such as id, type, name, label, language, exportable, documentation, code, parent, inDegree, and outDegree, and is used in the file where `Codebase`, `Node`, `ImportStatement`, and `ImportName` are imported from \"../src/model/codebase\"."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\c.test::rootFolderPath",
      "language": "typescript",
      "label": "rootFolderPath",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\c.test",
      "totalTokens": 7,
      "inDegree": 1,
      "outDegree": 1,
      "code": "rootFolderPath = '/my/path'",
      "importStatements": [],
      "codeNoBody": "rootFolderPath ={\n          //...\n      }",
      "summary": "The `rootFolderPath` variable is a string that stores the path '/my/path' and is defined in the file where the `Codebase`, `Node`, `ImportStatement`, and `ImportName` classes are imported from the '../src/model/codebase' module."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\java.test": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\java.test::nodeAttributes",
      "language": "typescript",
      "label": "nodeAttributes",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\java.test",
      "totalTokens": 39,
      "inDegree": 1,
      "outDegree": 1,
      "code": "nodeAttributes = ['id', 'type', 'name', 'label', 'language', 'exportable', 'documentation', 'code', 'parent', 'inDegree', 'outDegree']",
      "importStatements": [],
      "codeNoBody": "nodeAttributes ={\n          //...\n      }",
      "summary": "The `nodeAttributes` array includes attributes such as id, type, name, label, language, exportable, documentation, code, parent, inDegree, and outDegree, and is used in the file where `Codebase`, `Node`, `ImportStatement`, and `ImportName` are imported from `\"../src/model/codebase\"`."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\java.test::rootFolderPath",
      "language": "typescript",
      "label": "rootFolderPath",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\java.test",
      "totalTokens": 7,
      "inDegree": 1,
      "outDegree": 1,
      "code": "rootFolderPath = '/my/path'",
      "importStatements": [],
      "codeNoBody": "rootFolderPath ={\n          //...\n      }",
      "summary": "The `rootFolderPath` variable is a string that stores the path '/my/path' and is defined in the file where the `Codebase`, `Node`, `ImportStatement`, and `ImportName` imports are used from the '../src/model/codebase' module."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\javascript.test": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\javascript.test::nodeAttributes",
      "language": "typescript",
      "label": "nodeAttributes",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\javascript.test",
      "totalTokens": 39,
      "inDegree": 1,
      "outDegree": 1,
      "code": "nodeAttributes = ['id', 'type', 'name', 'label', 'language', 'exportable', 'documentation', 'code', 'parent', 'inDegree', 'outDegree']",
      "importStatements": [],
      "codeNoBody": "nodeAttributes ={\n          //...\n      }",
      "summary": "The `nodeAttributes` array includes attributes such as id, type, name, label, language, exportable, documentation, code, parent, inDegree, and outDegree, and is used in the file where `Codebase`, `Node`, `ImportStatement`, and `ImportName` are imported from `\"../src/model/codebase\"`."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\javascript.test::rootFolderPath",
      "language": "typescript",
      "label": "rootFolderPath",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\javascript.test",
      "totalTokens": 7,
      "inDegree": 1,
      "outDegree": 1,
      "code": "rootFolderPath = '/my/path'",
      "importStatements": [],
      "codeNoBody": "rootFolderPath ={\n          //...\n      }",
      "summary": "The `rootFolderPath` variable is a string that stores the path '/my/path' and is defined in the file where the `Codebase`, `Node`, `ImportStatement`, and `ImportName` classes are imported from the '../src/model/codebase' module."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\python.test": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\python.test::nodeAttributes",
      "language": "typescript",
      "label": "nodeAttributes",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\python.test",
      "totalTokens": 39,
      "inDegree": 1,
      "outDegree": 1,
      "code": "nodeAttributes = ['id', 'type', 'name', 'label', 'language', 'exportable', 'documentation', 'code', 'parent', 'inDegree', 'outDegree']",
      "importStatements": [],
      "codeNoBody": "nodeAttributes ={\n          //...\n      }",
      "summary": "The `nodeAttributes` array includes attributes such as id, type, name, label, language, exportable, documentation, code, parent, inDegree, and outDegree, and is used in the file where `Codebase`, `Node`, `ImportStatement`, and `ImportName` are imported from \"../src/model/codebase\"."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\python.test::rootFolderPath",
      "language": "typescript",
      "label": "rootFolderPath",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\python.test",
      "totalTokens": 7,
      "inDegree": 1,
      "outDegree": 1,
      "code": "rootFolderPath = '/my/path'",
      "importStatements": [],
      "codeNoBody": "rootFolderPath ={\n          //...\n      }",
      "summary": "The assignment `rootFolderPath` is a string variable that holds the value `'/my/path'` and is defined in the file where `Codebase`, `Node`, `ImportStatement`, and `ImportName` are imported from `\"../src/model/codebase\"`."
    }
  ],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\tests\\utils.test": [],
  "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki": [
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki::allCode",
      "language": "typescript",
      "label": "allCode",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki",
      "totalTokens": 4,
      "inDegree": 2,
      "outDegree": 1,
      "code": "allCode = \"\"",
      "importStatements": [],
      "codeNoBody": "allCode ={\n        //...\n    }",
      "summary": "The `allCode` variable is declared as an empty string in the file, utilizing the `fs`, `path`, and `OpenAI` import statements for potential functionality."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki::contents",
      "language": "typescript",
      "label": "contents",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki",
      "totalTokens": 3,
      "inDegree": 1,
      "outDegree": 1,
      "code": "contents = \"\"",
      "importStatements": [],
      "codeNoBody": "contents ={\n        //...\n    }",
      "summary": "Assigns an empty string to the variable \"contents\"."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki::nodesFilePath",
      "language": "typescript",
      "label": "nodesFilePath",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki",
      "totalTokens": 34,
      "inDegree": 2,
      "outDegree": 1,
      "code": "nodesFilePath: string =\r\n  \"C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/nodes.json\"",
      "importStatements": [],
      "codeNoBody": "nodesFilePath: string ={\n          //...\n      }",
      "summary": "The `nodesFilePath` variable stores the file path to the \"nodes.json\" file, which is located at \"C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/nodes.json\". It requires the `fs` and `path` modules for file system operations and path manipulation, respectively."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki::codebasePath",
      "language": "typescript",
      "label": "codebasePath",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki",
      "totalTokens": 30,
      "inDegree": 0,
      "outDegree": 1,
      "code": "codebasePath =\r\n  \"C:\\\\Users\\\\gmasc\\\\OneDrive\\\\Documentos\\\\CodeGPT\\\\Graphs\\\\codebase-index-ts\\\\\"",
      "importStatements": [],
      "codeNoBody": "codebasePath ={\n          //...\n      }",
      "summary": "The `codebasePath` variable stores the file path to the codebase directory where the TypeScript files are located, using the `path` module for path manipulation in Node.js."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki::OpenAI",
      "language": "typescript",
      "label": "OpenAI",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki",
      "totalTokens": 8,
      "inDegree": 2,
      "outDegree": 1,
      "code": "OpenAI = require(\"openai\")",
      "importStatements": [],
      "codeNoBody": "OpenAI ={\n          //...\n      }",
      "summary": "Import the OpenAI library using the `require` function from the \"openai\" package."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki::path",
      "language": "typescript",
      "label": "path",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki",
      "totalTokens": 6,
      "inDegree": 1,
      "outDegree": 1,
      "code": "path = require(\"path\")",
      "importStatements": [],
      "codeNoBody": "path ={\n          //...\n      }",
      "summary": "Imports the Node.js core module \"path\" using the `require` function, making path-related functionalities available for use in the file."
    },
    {
      "id": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki::fs",
      "language": "typescript",
      "label": "fs",
      "type": "assignment",
      "parent": "C:\\Users\\gmasc\\OneDrive\\Documentos\\CodeGPT\\Graphs\\codebase-index-ts\\wiki",
      "totalTokens": 8,
      "inDegree": 1,
      "outDegree": 1,
      "code": "fs = require(\"fs\").promises",
      "importStatements": [],
      "codeNoBody": "fs ={\n          //...\n      }",
      "summary": "Import the `fs` module from Node.js to work with the file system asynchronously using promises."
    }
  ]
}