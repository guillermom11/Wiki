{
  "judini-python-main\\examples\\chat_completion.py": "This file contains a function called \"chat_example\" that demonstrates a chat interaction with a CodeGPT agent by taking a list of messages as input, retrieving necessary credentials from environment variables, creating an instance of CodeGPTPlus class, and interacting with the agent to obtain responses. It requires imports from \"os\", \"judini\", and \"dotenv\".",
  "judini-python-main\\setup.py": "This file sets up the Judini Python package, version 0.1.12, developed by Judini Inc. It includes a description, long description from a README.md file, author information, package details, dependencies, and classifiers for compatibility.",
  "judini-python-main\\src\\judini\\__init__.py": "This file imports the `CodeGPTPlus` class from the `codegpt` module.",
  "judini-python-main\\src\\judini\\codegpt.py": "This file defines the base URL for the CodeGPT beta API endpoint as 'https://api-beta.codegpt.co/api/v1' in the variable `base_url` and stores the URL 'https://app.codegpt.co/en/apikeys' in the constant `PLAYGROUND_KEYS_URL`.",
  "judini-python-main\\src\\judini\\types.py": "The file \"types.py\" contains classes for representing an Agent, DocumentMetadata, and Document, each with specific attributes and functionalities such as handling JSON deserialization, metadata parameters, and document details. The classes utilize imports from pydantic, typing, and json for data validation and manipulation.",
  "judini-python-main\\src\\judini\\utils.py": "This file \"utils.py\" contains two functions: \"handle_stream\" and \"handle_non_stream\". The \"handle_stream\" function uses the `requests` library to handle a streaming response, yielding chunks of data from the response iteratively. On the other hand, the \"handle_non_stream\" function attempts to parse a requests.Response object as JSON and returns the parsed data as a string if successful, handling errors by printing the error message and closing the response object.",
  "judini-python-main\\streamlit.py": "The file \"streamlit.py\" utilizes Streamlit for creating a CodeGPT chat interface, allowing users to input queries and receive AI responses. It includes functionalities for setting API keys, managing messages, enabling streaming, and displaying chat messages between the user and the assistant."
}