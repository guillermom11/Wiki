{
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/jest.config": "# Configuration File - `jest.config`\n\n**File Path:** `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/jest.config`\n\n## Overview\n\nThe `jest.config` file is a configuration file for Jest, a delightful JavaScript Testing Framework with a focus on simplicity. This file is located in the repository's directory dedicated to TypeScript codebase handling graph algorithms. Specifically, it is housed in the directory `Graphs/codebase-index-ts`. The purpose of this file is to provide necessary configurations to Jest for successfully running tests in a TypeScript project.\n\n## Documentation of Parts\n\n### Module Exports\n\nAt the root of the `jest.config` file, the main structure is an object that Jest uses to determine how to execute tests within the project. This object is exported using the CommonJS `module.exports` syntax. This enables Jest to recognize and use the specific configurations detailed within this object.\n\n### Root Directory\n\nThis part of the configuration points Jest to the root directory for the project. It ensures that Jest looks for test files in the correct location within the repository structure. This is critical in large projects to maintain an organized directory structure and ensures that all testable files are included.\n\n### Test Environment\n\nThe configuration file specifies the environment that Jest uses to run the tests. For instance, specifying `\"testEnvironment\": \"node\"` sets Node.js as the environment. This is particularly useful for server-side code tested in a Node.js environment.\n\n### Transform Property\n\nThe `transform` property in the configuration file indicates how Jest should process typescript files with `ts-jest`, a TypeScript preprocessor with source map support. It is configured to detect `.ts` files and handle them appropriately, enabling Jest to understand and compile TypeScript code on the fly.\n\n### Module File Extensions\n\nThis configures Jest's module resolver to recognize files with specific extensions. For instance, the settings typically include a list of relevant extensions such as `ts`, `tsx`, `js`, `jsx`, and `json`. This broadens Jest's capability to handle TypeScript alongside JavaScript files efficiently.\n\n### Test Match Pattern\n\nThe `testMatch` setting informs Jest of the location and pattern of the test files. This typically is an array of glob patterns indicating where the test files are located, for example, within a `__tests__` folder or files named with a `.test.ts` or `.spec.ts` suffix. This pattern matching ensures that Jest executes only the intended test files.\n\n### Coverage Configuration\n\nIn the configuration file, the coverage properties can be set to ensure Jest performs code coverage analysis. The settings can guide Jest on which files or directories to include or exclude from the coverage report.\n\n## Conclusion\n\nThe `jest.config` file is a pivotal part of the repository, serving as the cornerstone for configuring how tests are run and managed in a TypeScript project. Through various properties like `rootDir`, `testEnvironment`, `transform`, `moduleFileExtensions`, `testMatch`, and coverage configuration, it precisely tailors the Jest testing framework to the project's needs. Whether itâ€™s specifying the directory paths, transforming TypeScript files, or pattern matching test files, the configurations ensure that Jest operates efficiently and effectively within this codebase. For more details, you can explore related files and configurations within the repository by navigating through relative paths, and it is recommended to look into other configuration and test files for broader context.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/index": "# Documentation for `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/index`\n\n## Overview\n\nThe file `index` in the path `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src` is a crucial part of the Graphs project's codebase. This file sets up and initializes the server application using various middleware and routing configurations facilitated by the [Hono framework](https://github.com/honojs/hono). It defines handlers for HTTP requests, particularly focusing on parsing a codebase and generating its simplified representations and links. The comprehensive approach ensures the networked application operates smoothly, catering to development and production environments.\n\n## Purpose\n\nThe primary role of the `index` file is to establish a server application that handles various HTTP requests, sets up middleware, and manages routes related to parsing and processing a codebase. By initializing ports and importing necessary modules, it ensures seamless network communication and efficient server management.\n\n## Middleware Setup\n\n### `prettyJSON`\n\nThe middleware `prettyJSON` is applied globally at the `*` path. It ensures JSON responses are formatted for better readability, which is essential for debugging and development purposes.\n\n### `cors`\n\nThe `cors` middleware is used at the `/v1/*` path, enabling cross-origin requests. This is particularly important for APIs that need to be accessed from different domains, thereby ensuring flexibility in client-server interactions.\n\n## Routes\n\n### Root (`/`)\n\nThe root route (`/`) processes GET requests and initiates the parsing of a specified codebase directory. It employs the `Codebase` module to analyze the directory, find nodes and establish relationships (or links) between them. The entire process is encapsulated and timed for efficiency. The results are written into `nodes.json` and `links.json` files using the `writeFile` method from the `fs/promises` module.\n\n#### Key Steps in Route:\n\n1. **Start Timer:** Begins timing the process for performance measurement.\n2. **Define Codebase Path:** Utilizes a hardcoded path to the directory.\n3. **Initialize Codebase:** Creates an instance of the `Codebase` class.\n4. **Parse Directory:** Calls `codebase.parseFolder` method.\n5. **Log Nodes:** Outputs the count of identified nodes.\n6. **Get Calls:** Retrieves call relationships between nodes.\n7. **End Timer:** Stops timing the process.\n8. **Simplify Codebase:** Simplifies node structures for better representation.\n9. **Get Links:** Establishes links between nodes.\n10. **Write Results:** Outputs data to `nodes.json` and `links.json`.\n11. **Respond:** Returns the simplified codebase.\n\n### `/v1/repo`, `/v1/graphs`, `/v1/repo-test`\n\nThese routes (`/v1/repo`, `/v1/graphs`, `/v1/repo-test`) are set up to handle requests related to repositories and graphs but require further implementation details.\n\n## Conclusion\n\nThe `index` file in the `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src` directory is integral to the server's functionality within the Graphs project. Its systematic setup of middleware and defined routes ensures efficient parsing and handling of codebase operations. The file serves as the entry point that orchestrates various components, establishing a robust and scalable server application. For further details, reviewing related modules such as `Codebase` or inspecting the routes handling in your repo would be beneficial.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/model/calls": "---\n# File Documentation: calls Model\n\n**File Path:** `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/model/calls`\n\n## Overview\n\nThe `calls` file located in the `src/model/` directory of the CodeGPT Graphs repository serves as a crucial component in managing the representation and handling of call relationships within the application. This file is nestled within the broader codebase system, interfacing with other parts of the repository to ensure proper model structure and functionality.\n\n## Purpose\n\nThe primary purpose of the `calls` file is to define and document the methods and properties associated with call relationships. These relationships are fundamental in tracking how different parts of the code interact with one another, particularly in the context of function calls and inter-module communications.\n\n## Content Structure\n\nThe documentation within the `calls` file can be compartmentalized into several key sections, each serving a distinct function:\n\n### 1. **Imports and Dependencies**\n\nThis initial section is dedicated to importing necessary modules and dependencies required for the subsequent definitions. These imports ensure that the `calls` file leverages the appropriate utilities and classes from elsewhere in the repository, promoting modularity and reusability.\n\n### 2. **Class Definitions**\n\nCentral to the `calls` file is the definition of the core class which encapsulates the logic for call handling. This class typically includes properties that represent the attributes of a call, and methods that define the behavior associated with calls.\n\n### 3. **Constructor Method**\n\nThe constructor (`constructor`) method is a special function within the class, responsible for initializing the class attributes. It sets up the initial state of an object created from the class, ensuring the proper assignment of properties and handling any initialization logic.\n\n### 4. **Instance Methods**\n\nInstance methods within the class define the behaviors that instances of the class can perform. These methods are integral to processing and managing the call relationships, potentially including creating, deleting, or modifying call entries.\n\n### 5. **Static Methods**\n\nIn addition to instance methods, the class may include static methods. These methods are called on the class itself rather than on instances of the class, providing utility functions that relate to the overall management of calls within the system.\n\n### 6. **Explanatory Comments**\n\nThroughout the file, explanatory comments provide valuable context and clarifications regarding the functionality of various components. These comments are intended to guide developers in understanding the implementation and usage of the class and its methods.\n\n## Related Files and References\n\n- **[index.ts](../index.ts)**\n- **[graphs.ts](../graphs/graphs.ts)**\n- **[models.ts](../models/models.ts)**\n\nThese related files and others within the `src` directory work in conjunction with the `calls` model to support the complete functionality of the CodeGPT Graphs application. They provide additional contexts, utilities, and frameworks necessary for the holistic operation of the system.\n\n## Conclusion\n\nIn summary, the `calls` file in the CodeGPT Graphs repository is an essential element that facilitates the modeling of call relationships. Through its structured definitions, methods, and reliance on other parts of the repository, it ensures a cohesive approach to managing code interactions. The careful documentation and organization within the file support a clear and maintainable codebase, aiding developers in navigating and extending the system.\n\n---",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/model/codebase": "# File Documentation: `codebase.js`\n\n## Overview\n\nThe file `codebase.js` located in the path `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/model/codebase` is a crucial component of the CodeGPT repository. This file includes an assignment for the `enc` variable, which retrieves the encoding scheme suitable for the `\"gpt-4-turbo\"` model using the `encoding_for_model` function. The core functionality ensures proper encoding and decoding of data when interacting with the model, facilitating precise and reliable text processing operations.\n\n## Purpose\n\nThe assignment `enc = encoding_for_model(\"gpt-4-turbo\")` is designed to set the variable `enc` to the specific encoding scheme of the GPT-4 Turbo model. This is imperative for tasks requiring text tokenization, decoding, and the correct handling of special tokens associated with the model. \n\n## Detailed Breakdown\n\n### Assignment\n\nThe primary assignment in this file is:\n```python\nenc = encoding_for_model(\"gpt-4-turbo\")\n```\n\n### Description\n\nThe assignment is structured to call the `encoding_for_model` function with the string `\"gpt-4-turbo\"`. This function call returns an encoding scheme tailored for the GPT-4 Turbo model, which is then assigned to the `enc` variable. This variable enables users to tokenize input text and decode the model's output efficiently and accurately.\n\n### Key Components\n\n- **Function Call: `encoding_for_model(\"gpt-4-turbo\")`**\n  - **Description:** This is a function call to obtain the encoding scheme compatible with the GPT-4 Turbo model.\n  - **Input:** A single string argument `\"gpt-4-turbo\"`, which is the identifier for the model.\n  - **Output:** Returns a specific encoding scheme for the GPT-4 Turbo model.\n  \n- **Variable Assignment: `enc`**\n  - **Description:** The encoding scheme obtained from the function call is stored in the variable `enc`.\n  - **Input:** Receives the encoding scheme from `encoding_for_model(\"gpt-4-turbo\")`.\n  - **Output:** The `enc` variable now holds the encoding scheme, ready for use in text tokenization and decoding tasks.\n\n### Usage\n\nThe encoding scheme within `enc` can be utilized for several operations with the GPT-4 Turbo model. These operations include:\n\n- Tokenizing input text before it is processed by the model.\n- Decoding the modelâ€™s output tokens back into human-readable text.\n- Handling special tokens and sequences specific to GPT-4 Turbo accurately.\n\n### Example\n\nAn illustrative example of how to use the encoding schema stored in `enc`:\n```python\ninput_text = \"Hello, how can I assist you today?\"\ntokens = enc.encode(input_text)  # Tokenizes the input text\ndecoded_text = enc.decode(tokens)  # Decodes the tokens back into text\n\nprint(tokens)  # Outputs the tokenized representation\nprint(decoded_text)  # Outputs: \"Hello, how can I assist you today?\"\n```\n\n## Summary\n\nTo summarize, the `enc` variable is essential for interacting seamlessly with the encoding and decoding requirements of the GPT-4 Turbo model. By assigning the correct encoding scheme to `enc`, users can ensure that text data is handled appropriately, maintaining the integrity and functionality of text operations in alignment with the model's specifications. This key component within the file `codebase.js` highlights the critical nature of precise encoding in the broader CodeGPT project.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/model/consts": "# Documentation for `consts` File\n\n**File Path**: `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/model/consts`\n\nThe `consts` file in the repository `codebase-index-ts` located at `src/model` is a hub of definitions and mappings that support various functionalities across the project. This file encompasses crucial components that facilitate indexing, language-specific operations, and code parsing.\n\n## Components\n\n### `treeSitterCommentTypes`\n`treeSitterCommentTypes` is an essential Python assignment that accommodates a list of strings, each portraying different types of comments acknowledged by Tree-sitter. This list, encompassing types like `comment`, `line_comment`, and `block_comment`, is pivotal for syntax highlighting and parsing, particularly in detecting comment nodes within source code.\n\n### `indexSuffixesMap`\n`indexSuffixesMap` is a TypeScript assignment defining a mapping between programming language identifiers and their respective index file suffixes. It assists in path resolution, permitting automatic generation or resolution of paths tailored to different languages. Each mapping ensures that respective suffixes coincide with language-specific conventions, aiding in project organization and build processes.\n\n### `itselfClassMap`\nThe `itselfClassMap` assigns a TypeScript object mapping various programming languages to their keywords for the current instance of the class. This is crucial for code analysis tools and language-specific operations, ensuring correct handling of instance references. Mappings encompass keywords like `self` in Python and `this` in JavaScript.\n\n### `newClassMethodsMap`\nAnother critical assignment is `newClassMethodsMap`, a TypeScript object that maps languages to their respective class constructor syntax. It ensures accurate implementation and transformation of constructor methods across different programming languages, providing essential support for multilingual development environments.\n\n### `languageExtensionMap`\nThe `languageExtensionMap` is pivotal for linking file extensions to their respective programming languages. This Record structure, ranging from `.py` for Python to `.java` for Java, assists in syntax highlighting and file analysis, providing a direct way to determine file types based on their extensions.\n\n### `languages`\nThe `languages` object is a comprehensive set listing various programming languages utilized within the project. This collection, including languages like JavaScript, Python, and TypeScript, aids in categorization and processing of different codebases within the project.\n\n### `excludedExtensions` and `excludedFolders`\nThe `excludedExtensions` list teems with file extensions earmarked for exclusion during certain operations. It ensures efficiency by excluding minimized and map files, which are non-essential for analysis. Similarly, the `excludedFolders` list identifies directories like `.git` and `node_modules` not pertinent to processing stages, bolstering operation speed and precision.\n\n## Tree-Sitter Assignments for Various Languages\nThe file includes various Tree-Sitter assignments for languages such as **C**, **Java**, **TSX**, **TypeScript**, **Python**, and **JavaScript**. Each of these employs the Tree-Sitter library to parse and analyze respective language codebases, playing a vital role in syntax tree generation and node manipulation. Refer to their respective modules:\n- [C](./Tree-Sitter-C)\n- [Java](./Tree-Sitter-Java)\n- [TSX](./Tree-Sitter-TSX)\n- [TypeScript](./Tree-Sitter-TypeScript)\n- [Python](./Tree-Sitter-Python)\n- [JavaScript](./Tree-Sitter-JavaScript)\n\nThis systematic organization and mapping in `consts` provide a robust foundation facilitating code analysis, multi-language support, and efficient processing within the repository.\n\n---\nFor more detailed documentation on specific components, please refer to their respective assignments within the repository.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/model/utils": "# File Documentation: `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/model/utils`\n\n## Overview\n\nThe `utils` file, located in the directory `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/model`, serves as a repository of utility functions providing a range of support functionalities for node retrieval, string cleaning, file handling, and parser query processing in a structured and hierarchical document processing system.\n\n## Functions\n\n### `getCalledNode`\n\nThe `getCalledNode` function facilitates the retrieval of a specific node from an imported file node. This utility plays a crucial role in navigating hierarchical relationships within structured documents or files. Its parameters include the `callName`, indicating the node identifier, `importFrom`, specifying the source of the imported file, and `importedFileNodes`, a dictionary containing the file nodes along with their respective import statements. The function returns the node that matches the call name, or `undefined` if not found.\n\n### `cleanAndSplitContent`\n\nThe `cleanAndSplitContent` function processes a given string to remove specific characters and format it into an array of strings. It removes parentheses, newlines, multiple spaces, and replaces colons and vertical bars with commas. This function is useful for preparing data for further processing where clean, split content is required.\n\n### `firstConsecutiveDots`\n\nThe `firstConsecutiveDots` function determines the length of the first sequence of consecutive dots in a given string, starting from the beginning. This is particularly useful for text formatting and parsing configurations where leading dots may denote hierarchical levels or special formatting requirements.\n\n### `cleanDefCaptures`\n\nThe `cleanDefCaptures` function processes an array of `Parser.QueryCapture` objects by sorting them based on their positions in the source code and filtering them according to a specified keyword. This ensures that only the first occurrence of the specified keyword is retained, along with all other non-matching captures. The function is essential for efficient parsing and identification of relevant code segments.\n\n### `getRequiredDefinitions`\n\nThe `getRequiredDefinitions` function initializes a parser for a specified programming language and retrieves corresponding query configurations. It supports various languages, including JavaScript, Python, TypeScript, TSX, Java, and C. This function ensures appropriate language-specific parsing and query handling.\n\n### `getAllFiles`\n\nThe `getAllFiles` function asynchronously retrieves a list of all valid files from a specified root folder path, applying inclusion and exclusion criteria based on file extensions and folder paths. This is critical for filtering and sorting files efficiently in large directories.\n\n## Dependencies and Related Files\n\nThis `utils` file has dependencies on several modules, including `Parser`, `languageQueries`, and file system operations (`fs.promises`). These dependencies must be imported and available in the environment. For a detailed overview of these dependencies and their configurations, refer to the specific implementation files and the directory context within the repository.\n\n---\n\nFor further details on the dependencies, configurations, and other helper functions within the same directory, you can refer to the following files:\n\n- [Parser Configuration](../parser/config.ts)\n- [Language Queries](../queries/languageQueries.ts)\n- [FS Operations](../fs/operations.ts)\n\nThis systematic documentation ensures you have a clear understanding of each function's purpose, parameters, and return values, along with their contextual relevance within the file.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/c": "# Documentation: `anyAssignments`\n\n### File Path\nLocated at: `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/c`\n\n### Overview\nThe `anyAssignments` file is part of a larger repository designed to analyze and process code structures. Located within the directory structure of `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/c`, this file contains pattern matchers crucial for identifying assignment statements in abstract syntax trees (ASTs). These patterns support tools that perform various tasks, such as static code analysis and refactoring, by recognizing key syntactic elements related to assignments in different programming languages.\n\n### Structure\nThe primary content of `anyAssignments` revolves around a pattern matcher that identifies assignments within a specific AST structure. The matcher is tailored to capture details about assignment statements including variable declarations and initializations involving identifiers.\n\n### Pattern Explained\nThe pattern in `anyAssignments` is expressed as follows:\n```plaintext\n(declaration\n    declarator: (\n        init_declarator\n            declarator: [\n                (identifier) @left\n                (pointer_declarator declarator: (identifier) @left)\n                ]\n            value: (_) @right\n        ) \n) @assignment\n```\n\n#### Nodes Breakdown\n- **`@assignment`**: Captures the entire assignment declaration, encapsulating the structure of the declaration.\n- **`init_declarator`**: Represents a node for a single variable declaration and its optional initialization.\n- **`declarator`**: Core structure of the variable being declared or initialized. It may contain:\n  - `(identifier) @left`: Direct variable name.\n  - `(pointer_declarator declarator: (identifier) @left)`: Pointer declaration and variable name.\n- **`@left`**: Captures the variable name, whether as a direct identifier or within a pointer declarator.\n- **`@right`**: Captures the value assigned to the variable if any, marked by `_`.\n\n### Capture Groups\n- **`@assignment`**: Full scope of the declaration.\n- **`@left`**: Name of the variable declared.\n- **`@right`**: Value assigned to the variable.\n\n### Usage\nThe `anyAssignments` pattern is instrumental in code analysis tools for recognizing and capturing assignment statements in source code. It aids in extracting variable names and their assigned values, which is pivotal for tasks like code refactoring, debugging, and documentation generation.\n\n### Example Application\nIn a C code snippet:\n```c\nint x = 42;\nint *y = &x;\n```\nThe `anyAssignments` pattern would match:\n- `@assignment` capturing the entire lines `int x = 42;` and `int *y = &x;`.\n- `@left` capturing `x` and `*y`.\n- `@right` capturing `42` and `&x`.\n\n### Conclusion\nThe `anyAssignments` file, housed within the project at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/c`, provides essential tools for advanced code analysis by detecting and leveraging assignment structures. Its robust pattern matching enhances the functionality of static analysis and refactoring tools, contributing significantly to maintaining and evolving codebases. For related patterns, you may explore other files in the directory to gain a comprehensive understanding of the project's capabilities.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/index": "# Documentation for `languageQueries` Assignment\n\n**File Path:** `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/index`\n\nThe `languageQueries` assignment file is a crucial component of the CodeGPT project, specifically designed to manage language-specific queries within the repository. Its primary function is to map different programming languages to their respective query objects, which contain specialized queries or settings pertinent to each programming language.\n\n## Structure of `languageQueries`\n\nThe core structure of the `languageQueries` assignment is a dictionary object. This dictionary maps programming languages like **Javascript**, **Typescript**, **Python**, **Java**, and **C** to their corresponding query nodes.\n\n```python\nlanguageQueries = {\n    \"Javascript\": jsQueries,\n    \"Typescript\": tsQueries,\n    \"Python\": pyQueries,\n    \"Java\": javaQueries,\n    \"C\": cQueries\n}\n```\n\n### Nodes Utilized\n\nEach key in the `languageQueries` dictionary is associated with a node, a variable that encapsulates a set of queries for a specific programming language. The nodes used are:\n\n- **Javascript**: Represented by `jsQueries`\n- **Typescript**: Represented by `tsQueries`\n- **Python**: Represented by `pyQueries`\n- **Java**: Represented by `javaQueries`\n- **C**: Represented by `cQueries`\n\n## Description of Query Nodes\n\n### `jsQueries`\n\nThe `jsQueries` node contains queries tailored to the JavaScript programming language. It is designed to include rules, patterns, and settings that facilitate interaction with JavaScript code.\n\n### `tsQueries`\n\nThe `tsQueries` node serves a similar function as `jsQueries` but is specifically tailored for TypeScript. This node addresses TypeScriptâ€™s unique type system and extended syntax, providing a comprehensive set of TypeScript-specific queries.\n\n### `pyQueries`\n\nThe `pyQueries` node is dedicated to Python. This node holds a variety of queries that are aligned with Python's syntax and semantics, enabling efficient querying and management of Python code.\n\n### `javaQueries`\n\nThe `javaQueries` node is focused on Java. It accommodates Javaâ€™s object-oriented paradigm, offering a suite of queries that are in sync with Java's syntax and structural characteristics.\n\n### `cQueries`\n\nThe `cQueries` node encompasses queries for the C programming language. This node focuses on Câ€™s procedural syntax and structural elements, ensuring precise and effective interaction with C code.\n\n## Example Usage\n\nThe queries referenced by `languageQueries` are typically predefined elsewhere in the codebase. For instance:\n\n```python\njsQueries = {...}  # JavaScript specific queries\ntsQueries = {...}  # TypeScript specific queries\npyQueries = {...}  # Python specific queries\njavaQueries = {...}  # Java specific queries\ncQueries = {...}  # C specific queries\n\nlanguageQueries = {\n    \"Javascript\": jsQueries,\n    \"Typescript\": tsQueries,\n    \"Python\": pyQueries,\n    \"Java\": javaQueries,\n    \"C\": cQueries\n}\n```\n\nIn practice, `languageQueries` acts as a centralized dictionary to dynamically access language-specific queries. For example, retrieving Python queries can be performed as follows:\n\n```python\nlanguage = \"Python\"\nqueries = languageQueries.get(language)\n# `queries` now contains the queries defined in `pyQueries`\n```\n\n## Remarks\n\nIt is essential to note that the `jsQueries`, `tsQueries`, `pyQueries`, `javaQueries`, and `cQueries` referenced in the `languageQueries` should be predefined dictionaries or objects containing the relevant queries. While the exact internal structure of these nodes is not detailed in this documentation, consistency in their design and purpose is assumed.\n\nThis documentation provides an informative guide to understanding the `languageQueries` assignment's intent, organization, and application within the CodeGPT project.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/java": "# `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/java` Documentation\n\nThe file located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/java` is a pivotal part of the repository. It contains several tree-sitter queries designed to parse and analyze Java source code. This documentation provides a comprehensive overview of the different assignments housed within this file, elucidating their purposes, structures, and potential use-cases.\n\n## Overview\n\nThis file comprises various tree-sitter patterns employed for matching specific constructs within Java code. These patterns aid in identifying syntax elements such as variable declarations, method calls, constructors, import statements, and class definitions. By capturing these elements, the patterns facilitate static code analysis, code refactoring, and other code processing tasks.\n\n## Detailed Descriptions\n\n### `anyAssignments`\n\nThe `anyAssignments` pattern aims to capture variable declarations paired with their assignments. This is achieved by recognizing both identifiers and object creation expressions. The pattern extracts the variable name (`@left`) and the assigned value (`@right`), which can be an identifier or an object creation expression.\n\n### `calls`\n\nThe `calls` assignment identifies method invocation expressions and type identifiers within the syntax tree. The captured method names (`@identifier.name`) and parameter types (`@parameter_type`) elucidate method calls and associated parameter data types, essential for analytical or linting operations.\n\n### `extraAssignmentCode` Function\n\nThis JavaScript function generates additional assignment code based on a provided name. While the current implementation returns an empty string, potential modifications could leverage this function to dynamically produce code snippets or personalized messages.\n\n### `exportClauses`\n\nInitially set as an empty string, `exportClauses` is a placeholder for a set of export clauses. Once defined, it will specify elements or data portions to be exported, interacting with various nodes such as Clause Nodes, Condition Nodes, and Dependency Nodes.\n\n### `constructorDefinitions`\n\nThe `constructorDefinitions` pattern identifies constructors and method declarations, tagging them as functions (`@function`) and class declarations as classes (`@class`). This differentiation assists in tasks like syntax highlighting, code analysis, and refactoring.\n\n### `definitionTemplate`\n\nThe `definitionTemplate` pattern matches the structure of function or method definitions, capturing elements like modifiers (`@modifier`), return types (`@return_type`), names (`@name`), parameters (`@param`), and bodies (`@body`). This comprehensive capture aids in multifaceted code analysis.\n\n### `assignments`\n\nThis placeholder assignment is initialized to an empty string. It serves as a foundational element, eventually to be defined with specific assignment logic or data, thereby playing a critical role in the file's functionality.\n\n### `importStatements`\n\nThe `importStatements` pattern captures import declarations within the source code, differentiating scoped and simple identifiers and tagging the entire import statement. This identification is useful for static code analysis, refactoring tools, and documentation generators.\n\n## Conclusion\n\nThe file at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/java` serves as a complex toolkit for parsing and analyzing Java code. Each pattern or function defined within this file plays a crucial role in facilitating diverse code processing tasks. For further insights and comprehensive understanding, it is recommended to explore related files and assignments within the same repository, contributing to a holistic grasp of the projectâ€™s capabilities.\n\nFor more related paths and detailed explanations of complementary queries, refer to other files within the `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/` directory.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/javascript": "# Documentation for `anyAssignments`\n\n## File Overview\nPath: `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/javascript/anyAssignments.js`\n\nThe `anyAssignments.js` file serves as a crucial part of the repository for identifying and processing diverse assignment expressions and functional calls in JavaScript code. The file is instrumental in analyzing and transforming code by pinpointing where variables are established or manipulated. It employs patterns for direct assignments, variable declarations, and specific functional calls such as `forEach`, `map`, and `reduce`.\n\n## Structure & Nodes\n\n### Assignment Expressions\nThe file defines patterns to identify direct assignment expressions. These include assignments where an identifier is allocated a value. The left-hand side of the assignment must be an identifier, while the right-hand side can be an identifier, a member expression, or a new expression.\n\n### Variable Declarators\nPatterns for variable declarations are explicitly outlined. These declarations initialize an identifier with a value, which can be an identifier, member expression, or new expression.\n\n### Functional Calls: `forEach` and `map`\nFor methods like `forEach` and `map`, the file captures functional calls where an arrow function is used as an argument. This consists of identifying the object upon which the method is invoked, the property (`forEach` or `map`), and the parameters of the arrow function utilized in the call.\n\n### Functional Calls: `reduce`\nSimilar to the `forEach` and `map` patterns, `reduce` method calls are captured. It focuses on the object the method is invoked on, the property (`reduce`), and the last parameter of the arrow function in the argument.\n\n## Summary\nThe `anyAssignments.js` script is a versatile utility designed for code analysis and transformation tasks centered on assignments and variable manipulations. By capturing a range of assignment patterns, from simple assignments to complex functional calls, it enables robust analysis and manipulation of JavaScript code structures.\n\nFor further exploration and understanding of related tasks, consider examining `calls.js` for call expression patterns, `extraAssignmentCode.js` for Tree-sitter query generation, and `arrowFunctionConstructor.js` for syntactic assignment documentation. These files can offer additional insights and functionalities that complement the patterns defined in `anyAssignments.js`.\n\n---\n\nFor additional details, visit the source repository folder: [`queries/javascript`](C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/javascript).\n\n---\n\nThis file, along with other related files such as `importStatements.js` and `exportClauses.js`, forms the backbone of a comprehensive framework dedicated to parsing, analyzing, and transforming JavaScript code effectively.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/python": "# File: C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/python\n\nThis file is an integral part of a Tree-sitter-based codebase indexing system, focusing on Python syntax queries. It defines a series of rules, leveraging the Tree-sitter query language, to identify and capture various syntactic constructs in a Python codebase. The primary objective of these rules is to facilitate static code analysis, refactoring, and documentation generation.\n\n## Overview of File Contents\n\nThe file contains detailed documentation and definitions for multiple patterns used to capture specific Python code constructs. The key elements covered in this file include assignment statements, function and method calls, function definitions, and import statements. Each pattern is meticulously described and encapsulated within a comprehensively named capture scheme for ease of processing and analysis.\n\n### `anyAssignments`\n\nThe `anyAssignments` section defines a pattern-matching rule for identifying assignment operations and typed function parameters. It uses a structured hierarchy to capture:\n1. **Classic Assignments:** Recognizes assignment operations where identifiers are assigned expressions.\n2. **Typed Function Parameters:** Focuses on capturing typed parameters within function definitions.\n\n#### Summary of Captures\n- **@left:** Refers to either the left-hand identifier in assignments or the parameter name in typed parameters.\n- **@right:** Refers to the right-hand expression in assignments or the type in typed parameters.\n- **@assignment:** Represents the entire assignment or typed parameter within the function definition.\n\n### `calls`\n\nThe `calls` section captures various constructs related to function calls, method calls, self-parameter access, class extensions, and more. It includes patterns to identify function calls, method calls, and class definitions with a focus on parameters and return types.\n\n#### Key Captures\n- **@identifier.name:** Used for capturing function and method names, attribute accesses, and keyword arguments.\n- **@class.definition:** Encapsulates class definitions and their possible extensions and methods.\n\n### `extraAssignmentCode`\n\n`extraAssignmentCode` is a function generating a Tree-sitter query string for identifying specific identifiers within code. It targets modules, function calls, and object attributes, facilitating identifier-based static analysis.\n\n### `constructorDefinitions`\n\nThis assignment maps nodes to their labels for identifying function and class definitions. It captures:\n- **@function:** Function definitions.\n- **@class:** Class definitions.\n\n### `definitionTemplate`\n\nThe `definitionTemplate` captures key elements of function definitions, including the function name, parameters, return type, documentation, and body. It also encompasses global assignment statements.\n\n### `importStatements`\n\nThis section focuses on capturing import statements, including standard imports, from imports, and future imports. It provides detailed captures for modules, names, aliases, and wildcard imports for comprehensive code analysis.\n\n## Conclusion\n\nOverall, this file sets a solid foundation for understanding and processing Python syntax within a Tree-sitter-based environment. By defining clear and structured patterns, it facilitates effective code analysis and transformation, thereby aiding developers and tools in making sense of large codebases. For further details, related files such as the main parser configuration and specific utility functions can be explored ([relative path links](/src/queries/parser-config) or [function utilities](/src/queries/utilities)).",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/typescript": "# Documentation: Import Statements Assignment\n\n## Overview\n\nThis documentation describes the contents and purpose of the `typescript` module, specifically focusing on the file path: `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/typescript`. This file primarily centers around defining and leveraging various JavaScript and TypeScript query assignments for static code analysis and manipulation.\n\n### File Path\n\n```plaintext\nC:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/queries/typescript\n```\n\n## Content Description\n\nThe `typescript` module contains crucial assignments designed to identify and manipulate code structures within JavaScript and TypeScript files. The assignments defined in this module include `anyAssignments`, `calls`, `extraAssignmentCode`, `exportClauses`, `constructorDefinitions`, `definitionTemplate`, and `importStatements`. Below, we describe each assignment in detail.\n\n### `anyAssignments`\nThe `anyAssignments` variable extends a pre-defined query (`jsQueries.assignments`) to identify function declarations within JavaScript that have annotated parameter types. This assignment leverages nodes such as `function_declaration`, `parameters`, and `type_identifier` to capture vital information regarding function parameters and their type annotations.\n\n### `calls`\nThe `calls` assignment extends `jsQueries.calls` by adding a specific query pattern to identify type identifiers and remove self-referential calls within class definitions. This assignment ensures that unnecessary recursive calls within classes are filtered out, preserving the integrity of each function call.\n\n### `extraAssignmentCode`\nThe `extraAssignmentCode` assignment is straightforward, as it simply assigns the value from `jsQueries.extraAssignmentCode`. This enables seamless access to additional JavaScript queries that may be defined elsewhere within the repository. \n\n### `exportClauses`\nSimilarly, the `exportClauses` assignment assigns the export clause definitions from `jsQueries.exportClauses`. This allows for the consistent handling of export statements within JavaScript and TypeScript code, aiding in tasks related to code modularity and dependency management.\n\n### `constructorDefinitions`\nThe `constructorDefinitions` assignment extends existing JavaScript query definitions to incorporate patterns for identifying TypeScript constructs, such as interfaces, enums, and exportable types. This allows for more comprehensive static analysis and code generation tasks within TypeScript codebases.\n\n### `definitionTemplate`\nThe `definitionTemplate` provides a template for extracting information about method signatures and arrow functions. It captures key components such as the function name, formal parameters, return type, and body, facilitating detailed code analysis and manipulation tasks.\n\n### `importStatements`\nFinally, the `importStatements` assignment references import statements defined within `jsQueries.importStatements`. This assignment aids in the systematic querying, analysis, and manipulation of import statements within JavaScript projects.\n\n## Purpose\n\nThe `typescript` module in the specified file path consolidates multiple query assignments to enhance the ability to analyze, manipulate, and generate JavaScript and TypeScript code. These assignments provide the foundation for various static analysis and code transformation tasks, enabling developers to work more efficiently with complex codebases.\n\n## Conclusion\n\nBy documenting the `typescript` module's contents and purpose systematically, we shed light on the utility of each assignment within the module. These assignments are designed to streamline tasks such as code analysis, refactoring, and generation, thereby improving the overall workflow and code quality within JavaScript and TypeScript projects.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/routes/create_graph-test": "# File Documentation: `create_graph-test.ts`\n\n**File Path:** `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/routes/create_graph-test.ts`\n\n## Introduction\nThe `create_graph-test.ts` file is part of the repository located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/routes/`. This TypeScript file plays a crucial role in the validation process for API requests related to repository access, particularly focusing on schema validation and environment variable management. \n\n## Purpose and Functionality\nThis file documents two vital components: `repoRequestValidator` and `secret`, which are covered in detail below.\n\n### `repoRequestValidator`\n\n#### Description\nThe `repoRequestValidator` is an assignment tasked with creating a validation schema using the `zValidator` function. This schema is meticulously designed to validate JSON objects representing requests to access a repository. Each request requires specific information such as the git provider, repository organization, repository name, branch, and connection ID.\n\n#### Components\n- **`zValidator`**: This function accepts a type indicator (`json` for JSON objects) and a validation schema, returning a validator to check data compliance with the schema.\n- **`z`**: An instance of a validation library like `zod`, providing tools for schema-based validation.\n- **`z.object({...})`**: Constructs an object schema defining a valid object's structure and types.\n- **`z.enum([...])`**: Creates a schema for enumerated types with a list of allowed values.\n- **`z.string()`**: Requires the value to be of string type.\n\n#### Schema Definition\nThe schema ensures the JSON object's compliance with the structure and constraints involving fields like `git_provider`, `repo_org`, `repo_name`, `branch`, and `connection_id`.\n\n#### Example Usage\nAn example JSON object adhering to this schema would include:\n```json\n{\n  \"git_provider\": \"github\",\n  \"repo_org\": \"exampleOrg\",\n  \"repo_name\": \"exampleRepo\",\n  \"branch\": \"main\",\n  \"connection_id\": \"abc123\"\n}\n```\n\nFurther details on usage can be found in the detailed implementation section above.\n\n### `secret`\n\n#### Description\nThe `secret` assignment fetches a value from an environment variable named `SUPABASE_JWT`. This value, likely a JSON Web Token (JWT), is instrumental for authentication purposes in secure environments. The function `getEnv` is utilized to retrieve this value.\n\n#### Components\n- **Variable (`secret`)**: Stores the fetched value from `SUPABASE_JWT`, expected to be a JWT string.\n- **Function (`getEnv`)**: Takes the environment variable name as a parameter and returns the value. \n\n#### Usage Example\n```python\nsecret = getEnv('SUPABASE_JWT')\n```\n\n#### Dependencies\nEnsure the `SUPABASE_JWT` environment variable is appropriately set, and the `getEnv` function is correctly defined in the scope.\n\n#### Security Considerations\nSensitive information managed through environment variables should be handled securely to prevent unauthorized access.\n\n## Conclusion\nThe `create_graph-test.ts` file is pivotal in validating repository access requests and securing JWTs. For further details on schema validation, refer to `zValidator` documentation, and for environment variable management, scrutinize `getEnv`'s definition. Proper configuration and security measures ensure correct and secure operation.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/routes/create_graph": "# Documentation for `create_graph.ts`\n\n## Overview\n\nThe file located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/routes/create_graph.ts` is a TypeScript module dedicated to processing the creation of a graph for a given codebase repository. This process involves the insertion of graph metadata, nodes, and links into a database, as well as updating the status of the graph creation procedure.\n\n### Function: `processGraphCreation`\n\n#### General Description\n\nThe `processGraphCreation` function is an asynchronous function that facilitates the creation of a graph for a specified repository. It is responsible for handling various tasks such as initializing graph metadata, managing database insertions, parsing the codebase, and updating the creation status. This function is pivotal in constructing the visual representation of the codebase structure.\n\n#### Parameters\n\n- **`gitProvider`** (`GitServiceType`): Specifies the Git service provider (e.g., GitHub, GitLab, Bitbucket).\n- **`repoId`** (`string`): The unique identifier for the repository.\n- **`userOrgId`** (`string`): The unique identifier for the user organization.\n- **`userId`** (`string`): The unique identifier for the user.\n- **`graphExists`** (`boolean`): Indicates whether the graph already exists.\n- **`connectionId`** (`string`): The connection identifier for the Git service provider.\n- **`codebasePath`** (`string`): The file system path to the codebase.\n\n#### Process Description\n\nThe function begins by generating a unique `graphId` using `uuidv4()`. Depending on whether the graph already exists, it sets the initial status of the graph to either `'completed'` or `'pending'`.\n\nIf the `codebasePath` is not provided, the function logs an error message and exits. Otherwise, it constructs a graph metadata object using the provided parameters, inserting this metadata into the `graphs` table in the database.\n\nIf the graph already exists, the function logs a completion message and exits early. If the graph does not exist, the function proceeds by creating a new `Codebase` instance and parsing the given codebase folder to generate a map of file nodes. These nodes are then simplified into a list of nodes.\n\nFor each node, unique IDs are generated, and SQL insertion promises are constructed to insert these nodes into the `nodes` table. Similarly, links are extracted and SQL insertion promises are constructed for inserting these links into the `links` table.\n\nFinally, the function executes all node and link insertion promises in parallel and updates the graph status to `'completed'`. In case of any errors during the process, the function logs the error message and updates the graph status to `'failed'`.\n\n#### Dependencies and Assumptions\n\n- The function assumes the existence of an underlying SQL database with `graphs`, `nodes`, and `links` tables.\n- External dependencies include the `Codebase` class and the `uuidv4` function.\n- The SQL operations likely utilize a library such as `slonik` for query construction and SQL injection safety.\n\n### Related Files and Functions\n\n- **`repoRequestValidator`**: Detailed in another file, this validator ensures that the JSON object conforms to the specified schema for repository requests. For more information, refer to the schema definition within the repository.\n- **Environment Variable Handling (`secret` assignment)**: The function imports environment variables using the `getEnv` function, specifically fetching the `SUPABASE_JWT` value critical for authentication or other secure operations. \n\nThis documentation provides a comprehensive overview of the `create_graph.ts` file and the `processGraphCreation` function, detailing its purpose, parameters, and procedural steps. For further information on related functionalities, please refer to the corresponding modules within the repository.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/routes/graphs": "# File Documentation: `graphs.ts`\n\n## File Path\n`C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/routes/graphs`\n\n## Overview\nThe `graphs.ts` file, located in the `src/routes/graphs` directory within the broader `Graphs` project, is pivotal for handling all graph-related routes. This file structures the ingestion, processing, and delivery of graph data, ensuring seamless integration with the wider codebase.\n\n## Structure and Content\nThe `graphs.ts` file is meticulously organized into distinct segments, each fulfilling a particular function in the routing process. Below is a detailed explanation of the contents and their respective roles:\n\n### Import Statements\nThe initial section of the file includes various import statements. These imports are crucial as they bring in necessary dependencies required for routing functionalities. Commonly imported modules may include Express for routing, various utility functions, and the core graph logic from other parts of the repository.\n\n### Route Definitions\nA significant portion of the file is dedicated to defining the graph-related routes. Each route corresponds to a specific HTTP method (GET, POST, etc.) and endpoint. For example, there may be routes to retrieve a graph, add new nodes, update edges, or delete nodes, among others. These routes are designed to handle incoming requests and route them to appropriate controllers or handlers.\n\n#### Example Route Configurations\n- **GET `/graphs`**: Fetch a list of available graphs.\n- **POST `/graphs`**: Create a new graph based on provided specifications.\n- **GET `/graphs/:id`**: Retrieve details of a specific graph by its ID.\n- **PUT `/graphs/:id`**: Update a specific graph's properties.\n- **DELETE `/graphs/:id`**: Remove a specific graph from the repository.\n\n### Middleware Integration\nTo ensure robust request processing, the file integrates various middleware functions. These middlewares can include validation layers, authentication checks, and logging mechanisms. Middleware functions are essential as they preprocess the requests to ensure they meet the required criteria before reaching the route handlers.\n\n### Controllers and Handlers\nThe core logic for handling each route is encapsulated within controllers and handlers. These functions process incoming data, perform the necessary database operations, and formulate responses. For instance, a GET request to fetch graph data would query the database using controllers and then return the results to the requester.\n\n### Error Handling\nProper error handling mechanisms are integrated to catch and manage exceptions that may arise during request processing. This ensures that the system remains resilient and provides meaningful error messages to the users.\n\n### Export Statements\nThe file concludes with export statements that make the configured routes accessible to other parts of the application. By exporting the configured routes, the `graphs.ts` file allows seamless integration with the main application server configurations.\n\n## Related Files\n- **[`controllers/graphController.ts`](../controllers/graphController.ts)**: Contains the business logic for handling graph operations.\n- **[`models/graphModel.ts`](../models/graphModel.ts)**: Defines the data structure and schema for graph entities in the database.\n- **[`middleware/authMiddleware.ts`](../middleware/authMiddleware.ts)**: Handles authentication and authorization processes.\n\n## Conclusion\nThe `graphs.ts` file is a central routing component within the `Graphs` project. It meticulously defines routes, integrates middleware, leverages controllers, and implements error handling to ensure seamless graph-related operations. The thorough organization and modular structure facilitate maintainability and scalability within the codebase.\n\n---\n\nFor more insights into the overall project and its components, please refer to the broader project documentation and associated module files.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/bitbucket/refresh-token": "# `refreshAccessToken` Function\n\n## Overview\nThe `refreshAccessToken` function, located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/bitbucket/refresh-token`, is an asynchronous method designed to refresh an expired access token using a provided refresh token. This function is instrumental in maintaining authenticated sessions with OAuth2-based services, such as Bitbucket.\n\n## Description\nThe primary purpose of the `refreshAccessToken` function is to ensure that authenticated sessions remain active by obtaining a new access token when the current one expires. This process involves using a refresh token supplied by the OAuth2 service.\n\n### Syntax\n```typescript\nasync function refreshAccessToken(refreshToken: string): Promise<any>\n```\n\n### Parameters\nThe function accepts a single parameter:\n- `refreshToken` (string): This is the refresh token provided by the OAuth2 service and is essential for acquiring a new access token and possibly a new refresh token.\n\n### Return Value\nThe function returns a `Promise<any>`. If successful, the promise resolves to an object containing the new access token and refresh token. If it fails, the function returns `null`.\n\n## Key Components\n### Nodes Utilized\n- `fetch`: This is used to make an HTTP POST request to the Bitbucket OAuth2 token endpoint.\n- `getEnv`: Presumed to be a utility function, this retrieves environment variables necessary for the OAuth2 process, such as `BITBUCKET_KEY` and `BITBUCKET_SECRET`. \n\n## Usage Example\nHere's an example demonstrating how to use the `refreshAccessToken` function:\n```typescript\nconst refreshToken = 'your-refresh-token-here';\n\nrefreshAccessToken(refreshToken)\n  .then(tokenData => {\n    if (tokenData) {\n      console.log('New Access Token:', tokenData.newAccessToken);\n      console.log('New Refresh Token:', tokenData.newRefreshToken);\n    } else {\n      console.log('Failed to refresh token.');\n    }\n  })\n  .catch(error => {\n    console.error('Unexpected error:', error);\n  });\n```\n\n## Implementation Details\n1. **Constructing the Request Body**:\n   - The function crafts a request body containing `refresh_token`, `grant_type`, `client_id`, and `client_secret`.\n   - The `client_id` and `client_secret` are obtained using `getEnv` calls for the `BITBUCKET_KEY` and `BITBUCKET_SECRET`.\n   - These parameters are encoded into a URL-encoded string.\n\n2. **Sending the Request**:\n   - A POST request is issued to `https://bitbucket.org/site/oauth2/access_token` with the constructed request body and appropriate headers (`Content-Type: application/x-www-form-urlencoded`).\n\n3. **Handling the Response**:\n   - If the response is successful (`res.ok`), the function extracts `access_token` and `refresh_token` from the response JSON and returns them.\n   - If not, it logs an error message along with the response data and returns `null`.\n\n4. **Error Handling**:\n   - To manage potential unexpected errors, the function employs a try-catch block, ensuring errors are logged and `null` is returned if the process fails.\n\n## Error Handling\nIn the event of request errors or invalid responses, the function catches and logs the errors to the console and signals failure by returning `null`.\n\nThis concludes the documentation for the `refreshAccessToken` function. Ensure that the `getEnv` utility function is correctly implemented and that the `fetch` API is available in your runtime environment for successful operation. For more details on related functions and utilities, consult the appropriate repositories and documentation within the [CodeGPT codebase](relative/path/to/repo).",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/db": "# SQL Configuration Assignment Documentation\n\nThe present documentation elucidates the `SQL Configuration Assignment` file situated in the directory `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/db`. This file is integral for configuring and establishing a connection to a PostgreSQL database using the `postgres` client within a Node.js environment.\n\n## Overview\n\nIn essence, this file delineates the setup of a variable named `sql`, an instance of the `postgres` client. This variable ensures seamless connectivity to a PostgreSQL database by utilizing environment variables for sensitive information such as the host, database name, port, username, and password. Besides, it encompasses specific settings for connection and idle timeout, along with SSL configurations to fortify secure communications.\n\n## Configuration Details\n\nCentral to this configuration is an object passed to the `postgres` client containing multiple parameters, each instrumental in establishing and sustaining the database connection effectively.\n\n### Parameters\n\n1. **host**:\n   - **Type**: `String`\n   - **Description**: Denotes the hostname or IP address of the PostgreSQL server.\n   - **Value Source**: Retrieved via `getEnv('DATABASE_HOST')` from `process.env.DATABASE_HOST`.\n\n2. **database**:\n   - **Type**: `String`\n   - **Description**: Specifies the name of the PostgreSQL database for the connection.\n   - **Value Source**: Retrieved via `getEnv('DATABASE_NAME')` from `process.env.DATABASE_NAME`.\n\n3. **port**:\n   - **Type**: `Number`\n   - **Description**: Represents the port number where the PostgreSQL server listens.\n   - **Value Source**: Retrieved through `getEnv('DATABASE_PORT')` from `process.env.DATABASE_PORT`, and subsequently converted to a number.\n\n4. **user**:\n   - **Type**: `String`\n   - **Description**: Username for authenticating with the PostgreSQL server.\n   - **Value Source**: Retrieved via `getEnv('DATABASE_USERNAME')` from `process.env.DATABASE_USERNAME`.\n\n5. **password**:\n   - **Type**: `String`\n   - **Description**: Password for authenticating with the PostgreSQL server.\n   - **Value Source**: Retrieved via `getEnv('DATABASE_PASSWORD')` from `process.env.DATABASE_PASSWORD`.\n\n6. **prepare**:\n   - **Type**: `Boolean`\n   - **Description**: Indicates whether to prepare statements. Primarily aims to enhance performance.\n   - **Default Value**: Set to `false`.\n\n7. **connect_timeout**:\n   - **Type**: `Number`\n   - **Description**: Maximum duration, in seconds, for a connection attempt.\n   - **Default Value**: `60` seconds.\n\n8. **idle_timeout**:\n   - **Type**: `Number`\n   - **Description**: Maximum duration, in seconds, for an idle connection before closure.\n   - **Default Value**: `60` seconds.\n\n9. **ssl**:\n   - **Type**: `Object`\n   - **Description**: SSL configuration object ensuring secure connection to the PostgreSQL server.\n      - **Fields**:\n        - **ca**:\n          - **Type**: `String`\n          - **Description**: SSL certificate authority certificate.\n          - **Value Source**: Retrieved via `getEnv('SUPABASE_CA_CERTIFICATE')` from `process.env.SUPABASE_CA_CERTIFICATE`.\n\n## Environment Variables\n\nSetting environment variables is paramount for the successful execution of this configuration, accessed using the `getEnv()` function. Essential variables include:\n\n- `DATABASE_HOST`\n- `DATABASE_NAME`\n- `DATABASE_PORT`\n- `DATABASE_USERNAME`\n- `DATABASE_PASSWORD`\n- `SUPABASE_CA_CERTIFICATE`\n\nProper configuration of these variables guarantees the versatility and security necessary for database interactions.\n\nIn conclusion, the `sql` assignment offers a robust and secure configuration for PostgreSQL database connections within a Node.js framework, adhering to best practices by utilizing environment variables and SSL for secure data management.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/git": "# C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/git\n\n## Overview\n\nThe file located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/git` is an important utility module within the `codebase-index-ts` repository. This file includes crucial functions such as `getCommitHash` and constant assignments like `MAXSIZE`, which are used for extracting commit hashes from various version control systems and setting predefined limits, respectively. This documentation provides a detailed overview of the core components within the file and their functionality.\n\n## Function: `getCommitHash`\n\n### Overview\n\nThe `getCommitHash` function is designed to extract and return the commit hash from data provided by different version control providers. It currently supports GitHub, GitLab, and Bitbucket, ensuring compatibility with the most widely used platforms.\n\n### Function Signature\n\n```typescript\nfunction getCommitHash(provider: 'github' | 'gitlab' | 'bitbucket', data: any): string\n```\n\n### Parameters\n\n- **provider**: \n  - Type: `string`\n  - Required: Yes\n  - Description: A string specifying the version control provider, which must be one of `'github'`, `'gitlab'`, or `'bitbucket'`.\n\n- **data**: \n  - Type: `any`\n  - Required: Yes\n  - Description: The data object from which the commit hash will be extracted, dependent on the provider.\n\n### Return Value\n\nThe function returns a `string` value representing the commit hash extracted from the provided data. The specific property of the data object used for extraction varies with the provider:\n- For `github`, it returns the `sha` property from the first item in the data array.\n- For `gitlab`, it returns the `id` property from the first item in the data array.\n- For `bitbucket`, it returns the `hash` property from the first item in the `values` array within data.\n\nIn cases where the provider does not match any supported providers, the function returns an empty string.\n\n### Usage Examples\n\n- **GitHub**:\n  ```javascript\n  const githubData = [{ sha: 'a1b2c3d4e5f6g7h8i9j0' }];\n  const commitHash = getCommitHash('github', githubData);\n  console.log(commitHash); // Output: 'a1b2c3d4e5f6g7h8i9j0'\n  ```\n\n- **GitLab**:\n  ```javascript\n  const gitlabData = [{ id: '1234567890abcdef' }];\n  const commitHash = getCommitHash('gitlab', gitlabData);\n  console.log(commitHash); // Output: '1234567890abcdef'\n  ```\n\n- **Bitbucket**:\n  ```javascript\n  const bitbucketData = { values: [{ hash: 'abcdef1234567890' }] };\n  const commitHash = getCommitHash('bitbucket', bitbucketData);\n  console.log(commitHash); // Output: 'abcdef1234567890'\n  ```\n\n- **Unsupported Provider**:\n  ```javascript\n  const unsupportedData = {};\n  const commitHash = getCommitHash('unsupported', unsupportedData);\n  console.log(commitHash); // Output: ''\n  ```\n\n### Notes\n\n- Ensure the data object structure aligns with the expected structure for the specified provider to prevent runtime errors.\n- The function currently supports only GitHub, GitLab, and Bitbucket. For other providers, the function will return an empty string.\n\n## Variable: `MAXSIZE`\n\n### Overview\n\nThe assignment of the `MAXSIZE` variable is a simple yet critical component of the file. It sets the value of `MAXSIZE` to `2`.\n\n### Description\n\n`MAXSIZE` is commonly used as a constant within the program to represent a threshold, limit, or configuration setting. The value `2` is assigned to `MAXSIZE`, which indicates the maximum size allowed for a particular operation or process within the application.\n\n### Usage Example\n\n```python\nif len(items) > MAXSIZE:\n    print(\"Exceeded the maximum size.\")\n```\n\n### Notes\n\n- The naming convention of using uppercase letters for `MAXSIZE` indicates it is intended to be a constant.\n- Defining constants at the beginning of a program/module or in a separate configuration file is a common practice.\n\nBy understanding the functional and structural components of this file, developers can effectively manage and utilize these utilities within the broader `codebase-index-ts` repository. For more detailed code implementation, refer to the actual file within the repository at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/git`.\n\n",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/gitlab/refresh-token": "# File: `refresh-token`\n\n## Overview\n\nThe file `refresh-token`, located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/gitlab/refresh-token`, is a utility module responsible for handling the refreshment of access tokens for the GitLab OAuth integration. Within this file, the primary function, `refreshAccessToken`, encapsulates the core functionality, aiming to streamline the process of obtaining new access and refresh tokens using an existing refresh token.\n\n## `refreshAccessToken` Function\n\n### Description\n\nThe `refreshAccessToken` function is designed to refresh an access token by making an HTTP request to the GitLab OAuth endpoint. This function is fundamental in scenarios where maintaining an active session is crucial and access tokens need to be rotated on expiry.\n\n### Parameters\n\n- **`refreshToken` (string)**: The function takes a single parameter, `refreshToken`, which represents the refresh token previously obtained. This token is used to request a new pair of access and refresh tokens from GitLab.\n\n### Return Value\n\n- **`Promise<any>`**: The function returns a promise that resolves with an object containing the `newAccessToken` and `newRefreshToken` upon a successful request. If the request fails or an error occurs, the promise resolves to `null`.\n\n### Usage Example\n\n```javascript\n(async function example() {\n  const existingRefreshToken = 'your-existing-refresh-token';\n  const tokens = await refreshAccessToken(existingRefreshToken);\n\n  if (tokens) {\n    console.log('New access token:', tokens.newAccessToken);\n    console.log('New refresh token:', tokens.newRefreshToken);\n  } else {\n    console.error('Failed to refresh access token.');\n  }\n})();\n```\n\n### Implementation Details\n\nThe function is meticulously designed for robust error handling and optimal interaction with the GitLab API:\n\n1. **API Endpoint Construction**: The function constructs the GitLab OAuth token endpoint URL and appends necessary query parameters for the token refresh operation.\n2. **Request Submission**: It sends a POST request with appropriate headers (`Content-Type` and `Accept`) to the constructed URL.\n3. **Response Processing**: \n   - On success, it extracts and returns the `access_token` and `refresh_token` from the response payload.\n   - On failure, it logs the error details and returns `null`.\n\n### Dependencies\n\nThe function relies on the following dependencies:\n \n- **`fetch`**: A function available in modern JavaScript environments. In Node.js contexts, it requires a polyfill such as `node-fetch` or `isomorphic-fetch`.\n- **`getEnv`**: A utility function for retrieving environment variables (`GITLAB_APP_ID` and `GITLAB_SECRET_ID`), presumed to be defined elsewhere in the codebase.\n\n### Error Handling\n\nErrors encountered during the request or token refresh are logged to the console, providing transparency for debugging. The function ensures that it returns `null` in the event of any error, thus enabling calling functions to handle such cases gracefully.\n\n### Environment Variables\n\nFor the `refreshAccessToken` function to operate correctly, the following environment variables should be set:\n\n- **`GITLAB_APP_ID`**: The client ID for the GitLab application.\n- **`GITLAB_SECRET_ID`**: The client secret for the GitLab application.\n\nBy ensuring these variables are properly configured, the function can successfully authenticate and interact with the GitLab OAuth service.\n\n---\n\nThis documentation provides an exhaustive overview of the `refresh-token` file and its primary function. For more details on other utility functions, visit the relative paths within the repository. This structure promotes a robust and systematic approach to managing OAuth tokens in a GitLab-integrated environment.",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/utils": "# `utils.js` - Environment Variables Configuration\n\n## Overview\n\nThe `utils.js` file located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/utils/utils` is a configuration script dedicated to consolidating various environment variables into a single object, aptly named `ENV_VARS`. These environment variables are crucial for establishing connections to databases, as well as for authenticating with services like Supabase, GitLab, and Bitbucket. The use of environment variables safeguards sensitive information, ensuring that no confidential data is hardcoded and allowing for seamless adjustments depending on the deployment context.\n\n## Contents\n\nThe `utils.js` file primarily defines an `ENV_VARS` object, systematically organizing environment variables required for database configuration and integrations with third-party services such as Supabase, GitLab, and Bitbucket.\n\n### Structure of `ENV_VARS`\n\nThe `ENV_VARS` object is declared and initialized by sourcing values from the environment variables. This object includes a series of predefined keys representing different configuration parameters, pulling their values directly from the process environment.\n\n### Environment Variables Included\n\n#### Database Configuration Variables\n\n1. **DATABASE_USERNAME**: The user credential necessary for database connection.\n2. **DATABASE_PASSWORD**: The password linked with the `DATABASE_USERNAME`.\n3. **DATABASE_HOST**: The domain or IP where the database server is running.\n4. **DATABASE_PORT**: The port number for accessing the database server.\n5. **DATABASE_NAME**: The specific database name being targeted for operations.\n\n#### Supabase Configuration Variables\n\n6. **SUPABASE_CA_CERTIFICATE**: CA certificate to validate connections to Supabase.\n7. **SUPABASE_JWT**: JSON Web Token for authenticating with Supabase services.\n\n#### GitLab Configuration Variables\n\n8. **GITLAB_APP_ID**: The application ID used to access GitLab APIs.\n9. **GITLAB_SECRET_ID**: The secret associated with the GitLab applicationâ€™s ID.\n\n#### Bitbucket Configuration Variables\n\n10. **BITBUCKET_KEY**: The consumer key for accessing Bitbucket API.\n11. **BITBUCKET_SECRET**: The consumer secret for the Bitbucket key.\n\n## Utilization\n\nTo utilize the `ENV_VARS` configuration, it is essential that every necessary environment variable is predefined in the deployment setting. These variables can be set using environment files (`.env`), or they can be managed via deployment automation tools.\n\nFor instance, accessing the database username from the `ENV_VARS` object in application code would look like:\n\n```javascript\nconst dbUsername = ENV_VARS.DATABASE_USERNAME;\n```\n\n## Notes\n\n1. It's crucial to ensure that all required environment variables are properly set up to prevent runtime issues.\n2. Sensitive information should never be hardcoded into the source files for security reasons.\n3. Employing environment variables aids in the flexibility of managing different application settings across various environments such as development, testing, and production.\n\nBy encapsulating crucial configuration details within environment variables, the `utils.js` file significantly contributes to a secure and adaptable application setup. For more information on related files and configuration practices, refer to the repository's [official documentation](../README.md).",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/wiki/genWikiHtml": "# Documentation: `genWikiHtml.js`\n\n## Overview\n\nThe file `genWikiHtml.js` is located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/wiki/genWikiHtml`. This file is an integral part of a repository that deals with the generation of HTML content for a wiki, utilizing various functions and assignments to manipulate and structure data.\n\n## Functionality and Components\n\nThis file contains several key components crucial for processing and generating HTML from folder contents. The primary functionalities encapsulated in this file include processing the content of directories and managing paths for output and JSON files.\n\n### Function: `processFolderContents`\n\n#### Description\nAt the heart of `genWikiHtml.js` is the `processFolderContents` function. This function is designed to process a complex folder structure and generate an HTML string representation of the contents.\n\n- **Input:** It takes an object with folder paths as keys and nodes as values, appending HTML content that represents each folder and its corresponding nodes.\n- **Logic:** The folders are processed in descending order of their path length to ensure that deeper levels are handled first.\n- **Output:** The function returns an HTML string.\n\nThis function uses techniques such as extracting folder paths, sorting them, and converting folder contents into HTML sections and articles. The detailed documentation of this function can be found [here](#documentation).\n\n### Variable: `outputHtmlPath`\n\n#### Overview\n`outputHtmlPath` is a variable that specifies the file path for storing the output HTML wiki contents.\n\n- **Assignment:** `outputHtmlPath = \"repository_wiki.html\"`\n- **Purpose:** It dictates where the generated HTML file will be saved.\n\n### Variable: `folderContentsPath`\n\n#### Overview\n`folderContentsPath` holds the path to a JSON file named `folderContents.json`.\n\n- **Assignment:** `folderContentsPath = \"folderContents.json\"`\n- **Purpose:** It specifies the path for reading and writing folder contents.\n\n### Module: `path2`\n\n#### Overview\nThe module imports Node.js's built-in `path` module, assigned to the variable `path2`.\n\n- **Assignment:** `path2 = require(\"path\")`\n- **Purpose:** It provides utilities for manipulating file and directory paths.\n\n### Module: `fs2`\n\n#### Overview\nThe module imports the `promises` API from Node.js's `fs` (file system) module.\n\n- **Assignment:** `fs2 = require(\"fs\").promises`\n- **Purpose:** It offers promise-based methods for file operations, integrating seamlessly with `async`/`await`.\n\n## Example Usage\n\nThe `genWikiHtml.js` file is instrumental in the broader system due to its structured approach to transforming directory contents into a well-organized HTML format. \n\n### Illustrative Example\nAn example of using the `processFolderContents` function alongside `outputHtmlPath` and `folderContentsPath` variables would involve initializing folder contents and invoking the function to generate the HTML.\n\n```javascript\nconst folderContents = {\n  \"folder1\": [{ summary: \"Node 1 summary\" }, { summary: \"Node 2 summary\" }],\n  \"folder2/subfolder1\": [{ summary: \"Subfolder node summary\" }]\n};\n\nlet initialHtmlContent = \"<div>Initial Content</div>\\n\";\n\nprocessFolderContents(folderContents, initialHtmlContent).then(updatedHtmlContent => {\n  async function saveHtmlContent() {\n    await fs2.writeFile(outputHtmlPath, updatedHtmlContent, 'utf8');\n  }\n  saveHtmlContent();\n});\n```\n\n## Conclusion\n\n`genWikiHtml.js` serves as an essential part of the repository, guiding the processing of folder contents into HTML and managing critical file paths. Each function and variable within it is designed to ensure a smooth, seamless experience in generating and storing HTML representations of directory contents, aligning with the repository's overall goal of structuring and presenting information effectively. For further information on related components, refer to the detailed function documentation [here](#documentation).",
  "C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/wiki/wiki": "# Wiki File Documentation\n\n## Overview\n\nThe file located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/wiki/wiki` is an integral part of the `codebase-index-ts` project under the `Graphs` repository. This file is part of a larger directory structure and serves specific functionalities critical to the project. This documentation provides a detailed description of its contents, usage scenarios, and its relationships to other components in the repository.\n\n## File Contents\n\n### `contents` Variable\n\nThe `contents` variable is initialized as an empty string:\n```python\ncontents = \"\"\n```\n**Description**: The `contents` variable holds no textual data upon initialization. This setup suggests future operations where `contents` might be dynamically populated.\n\n**Possible Usage Scenarios**:\n1. **Initialization for Future Use**: Serving as a placeholder until populated later.\n2. **Indicator of Empty State**: Signifying that the variable is currently uninitialized.\n3. **Avoiding Null Errors**: Preventing potential null reference errors during subsequent manipulations.\n\n**Example**:\n```python\ncontents = \"\"  # Initially empty\ncontents = \"Example text\"  # Later populated\nprint(contents)  # Output: Example text\n```\n\n### `nodesFilePath` Variable\n\nThe `nodesFilePath` is defined as:\n```typescript\nnodesFilePath: string = \"C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/nodes.json\";\n```\n**Description**: This string specifies the absolute path to `nodes.json`, a JSON file crucial for storing node-related data, likely used in graph-related operations. \n\n**Usage**:\n- **Reading Node Data**: Importing and parsing data from `nodes.json`.\n- **Writing Node Data**: Exporting or updating node-related data structures to this file.\n\n**Example**:\n```typescript\nconst fs = require('fs');\nfs.readFile(nodesFilePath, 'utf8', (err, data) => {\n    if (err) console.error('Error:', err);\n    const nodes = JSON.parse(data);\n    console.log('Nodes data:', nodes);\n});\n```\n\n### `codebasePath` Variable\n\nThe `codebasePath` is defined as:\n```plaintext\ncodebasePath = \"C:\\\\Users\\\\gmasc\\\\OneDrive\\\\Documentos\\\\CodeGPT\\\\Graphs\\\\codebase-index-ts\\\\src\\\\utils\"\n```\n**Description**: A string representing an absolute path to the `utils` directory within the project, specifically in the `src` directory of `codebase-index-ts`.\n\n**Usage**:\n- **Module Imports**: Importing utility scripts or modules located within the `utils` directory.\n- **File Operations**: Accessing or manipulating files in this directory.\n\n**Example**:\n```javascript\nconst utilsPath = \"C:\\\\Users\\\\gmasc\\\\OneDrive\\\\Documentos\\\\CodeGPT\\\\Graphs\\\\codebase-index-ts\\\\src\\\\utils\";\nconst someUtil = require(`${utilsPath}\\\\someUtil.js`);\nsomeUtil.performTask();\n```\n\n### OpenAI Module Integration\n\nTo integrate with OpenAI services, the file includes configurations and usage examples for text generation and other AI functionalities. The file provides essential methods and error handling mechanisms vital for robust application development. For more detailed information, refer to the [OpenAI Documentation](https://beta.openai.com/docs/).\n\n## Conclusion\n\nThe file located at `C:/Users/gmasc/OneDrive/Documentos/CodeGPT/Graphs/codebase-index-ts/src/wiki/wiki` is pivotal for handling various configurations and path assignments within the project. Its proper initialization and usage ensure seamless operation of graph-related functionalities, file manipulations, and AI integrations, marking its significance within the repository structure of `codebase-index-ts`."
}