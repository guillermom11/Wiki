{
  "": "# Wiki for `codebase-index-ts` Repository\n\n## Overview\nThe `codebase-index-ts` repository is designed to parse and analyze codebases, generate graph representations of the code structure, and provide endpoints for interacting with these graphs. The repository includes scripts for converting graph data, configuration files for testing, modules for handling various programming languages, and utilities for interacting with Git repositories and databases. The primary purpose is to facilitate codebase analysis, documentation generation, and visualization.\n\n## Main Features and Subfolders\n\n### Root Directory\n- **`graph_to_csv.py`**: Converts graph data from JSON format to CSV format for easier manipulation and analysis.\n- **`jest.config.js`**: Configuration file for Jest, setting up the testing environment for JavaScript and TypeScript applications.\n\n### `src` Directory\nThis directory contains the core modules and utilities for the project.\n\n#### `communities`\n- **`communities.ts`**: Reads node and link data from JSON files, constructs a graph, detects communities using the Louvain algorithm, and serves the graph data via an Express server.\n\n#### `index.ts`\n- **`index.ts`**: Main entry point for the Node.js server application built using the Hono framework. It parses codebases, generates graph representations, and provides endpoints for interacting with these graphs.\n\n#### `llamaindex.ts`\n- **`llamaindex.ts`**: Demonstrates creating and querying a vector store index using the `llamaindex` library. It handles text data, generates embeddings, and performs queries on those embeddings.\n\n#### `model`\n- **`calls.ts`**: Captures and manages function calls and variable assignments within a codebase. Provides classes like `VariableAssignment`, `CallIdentifier`, and `CallsCapturer`.\n- **`codebase.ts`**: Core component representing and managing a codebase. Defines classes like `Codebase`, `Node`, `ImportStatement`, and `ImportName`.\n- **`consts.ts`**: Central repository for constants and type definitions used throughout the codebase, including language parsers, allowed types, and excluded folders.\n- **`utils.ts`**: Utility functions for file handling, code parsing, and content processing. Includes functions like `getAllFiles`, `getTotalSize`, `captureQuery`, and `cleanAndSplitContent`.\n\n#### `queries`\nContains language-specific query definitions for parsing and analyzing code using Tree-sitter.\n\n- **`c.ts`**: Defines queries for C code, capturing import statements, assignments, function definitions, and calls.\n- **`index.ts`**: Central hub for managing language-specific queries, combining them into a single object `languageQueries`.\n- **`java.ts`**: Defines queries for Java code, capturing import statements, assignments, function definitions, and calls.\n- **`javascript.ts`**: Defines queries for JavaScript code, capturing import statements, assignments, function definitions, and calls.\n- **`php.ts`**: Defines queries for PHP code, capturing import statements, assignments, function definitions, and calls.\n- **`python.ts`**: Defines queries for Python code, capturing import statements, assignments, function definitions, and calls.\n- **`typescript.ts`**: Defines queries for TypeScript code, capturing import statements, assignments, function definitions, and calls.\n\n#### `routes`\nDefines API endpoints for creating and updating graph representations of code repositories.\n\n- **`create_graph-test.ts`**: Handles requests to generate a graph representation of a codebase from a specified GitHub repository.\n- **`create_graph.ts`**: Provides an API endpoint for creating a graph representation of a Git repository.\n- **`graphs.ts`**: Handles the updating of graph data related to code repositories.\n\n#### `tools`\n- **`function_tools.ts`**: Utility functions for working with graph nodes and links, including functions like `getGraphNodesById`, `getGraphLinksById`, `getCode`, and `similarTo`.\n\n#### `utils`\nContains various utility modules for interacting with external services and managing environment variables.\n\n- **`ai.ts`**: Utility for interacting with the OpenAI API, defining types and functions for generating chat completions.\n- **`bitbucket/refresh-token.ts`**: Handles the process of obtaining a new access token from Bitbucket using a refresh token.\n- **`db.ts`**: Manages database interactions, setting up a PostgreSQL connection and providing functions to retrieve graph nodes and links.\n- **`git.ts`**: Handles interactions with Git repositories, including downloading and extracting repositories, retrieving commit information, and managing access tokens.\n- **`gitlab/refresh-token.ts`**: Handles the process of refreshing GitLab access tokens using a provided refresh token.\n- **`utils.ts`**: Manages environment variables, providing a centralized way to access and retrieve environment-specific configurations.\n\n#### `wiki`\nHandles the generation of documentation for codebases.\n\n- **`test-wiki.ts`**: Generates documentation by parsing the codebase structure, identifying relationships, and creating a graph representation.\n- **`utils.ts`**: Utility functions for building graphs, traversing them, and generating detailed documentation for nodes and folders.\n- **`wiki.ts`**: Core component for generating documentation by leveraging graph structures and organizing nodes and links into levels.\n- **`wikiGuille.ts`**: Generates comprehensive documentation for a code repository by analyzing its structure and contents, leveraging the OpenAI API.\n\n### `tests`\nContains unit tests for validating the functionality of various modules in the project.\n\n- **`c.test.ts`**: Validates the parsing and analysis of C language code files.\n- **`java.test.ts`**: Validates the parsing and analysis of Java source files.\n- **`javascript.test.ts`**: Validates the parsing and analysis of JavaScript and TypeScript code.\n- **`php.test.ts`**: Validates the parsing and analysis of PHP code files.\n- **`python.test.ts`**: Validates the parsing and analysis of Python code files.\n- **`utils.test.ts`**: Validates the functionality of utility functions used within the project.\n\n## Conclusion\nThe `codebase-index-ts` repository provides a comprehensive suite of tools and utilities for parsing, analyzing, and documenting codebases. By leveraging graph representations and advanced models like OpenAI, it facilitates a deeper understanding of code structure and relationships, making it easier to maintain and extend large codebases. The repository includes robust testing to ensure the accuracy and reliability of its features."
}